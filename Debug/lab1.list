
lab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028b8  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08002a64  08002a64  00012a64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b14  08002b14  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08002b14  08002b14  00012b14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002b1c  08002b1c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b1c  08002b1c  00012b1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b20  08002b20  00012b20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08002b24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          000000e0  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000158  20000158  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000470b  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000011fe  00000000  00000000  000247b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000498  00000000  00000000  000259b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000003e0  00000000  00000000  00025e50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000218f9  00000000  00000000  00026230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00005f4e  00000000  00000000  00047b29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ca86e  00000000  00000000  0004da77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001182e5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001a28  00000000  00000000  00118338  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000078 	.word	0x20000078
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08002a4c 	.word	0x08002a4c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	2000007c 	.word	0x2000007c
 80001e8:	08002a4c 	.word	0x08002a4c

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b974 	b.w	80004fc <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	468e      	mov	lr, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	d14d      	bne.n	80002d6 <__udivmoddi4+0xaa>
 800023a:	428a      	cmp	r2, r1
 800023c:	4694      	mov	ip, r2
 800023e:	d969      	bls.n	8000314 <__udivmoddi4+0xe8>
 8000240:	fab2 f282 	clz	r2, r2
 8000244:	b152      	cbz	r2, 800025c <__udivmoddi4+0x30>
 8000246:	fa01 f302 	lsl.w	r3, r1, r2
 800024a:	f1c2 0120 	rsb	r1, r2, #32
 800024e:	fa20 f101 	lsr.w	r1, r0, r1
 8000252:	fa0c fc02 	lsl.w	ip, ip, r2
 8000256:	ea41 0e03 	orr.w	lr, r1, r3
 800025a:	4094      	lsls	r4, r2
 800025c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000260:	0c21      	lsrs	r1, r4, #16
 8000262:	fbbe f6f8 	udiv	r6, lr, r8
 8000266:	fa1f f78c 	uxth.w	r7, ip
 800026a:	fb08 e316 	mls	r3, r8, r6, lr
 800026e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000272:	fb06 f107 	mul.w	r1, r6, r7
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000282:	f080 811f 	bcs.w	80004c4 <__udivmoddi4+0x298>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 811c 	bls.w	80004c4 <__udivmoddi4+0x298>
 800028c:	3e02      	subs	r6, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a5b      	subs	r3, r3, r1
 8000292:	b2a4      	uxth	r4, r4
 8000294:	fbb3 f0f8 	udiv	r0, r3, r8
 8000298:	fb08 3310 	mls	r3, r8, r0, r3
 800029c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a0:	fb00 f707 	mul.w	r7, r0, r7
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	d90a      	bls.n	80002be <__udivmoddi4+0x92>
 80002a8:	eb1c 0404 	adds.w	r4, ip, r4
 80002ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b0:	f080 810a 	bcs.w	80004c8 <__udivmoddi4+0x29c>
 80002b4:	42a7      	cmp	r7, r4
 80002b6:	f240 8107 	bls.w	80004c8 <__udivmoddi4+0x29c>
 80002ba:	4464      	add	r4, ip
 80002bc:	3802      	subs	r0, #2
 80002be:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c2:	1be4      	subs	r4, r4, r7
 80002c4:	2600      	movs	r6, #0
 80002c6:	b11d      	cbz	r5, 80002d0 <__udivmoddi4+0xa4>
 80002c8:	40d4      	lsrs	r4, r2
 80002ca:	2300      	movs	r3, #0
 80002cc:	e9c5 4300 	strd	r4, r3, [r5]
 80002d0:	4631      	mov	r1, r6
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d909      	bls.n	80002ee <__udivmoddi4+0xc2>
 80002da:	2d00      	cmp	r5, #0
 80002dc:	f000 80ef 	beq.w	80004be <__udivmoddi4+0x292>
 80002e0:	2600      	movs	r6, #0
 80002e2:	e9c5 0100 	strd	r0, r1, [r5]
 80002e6:	4630      	mov	r0, r6
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	fab3 f683 	clz	r6, r3
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	d14a      	bne.n	800038c <__udivmoddi4+0x160>
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xd4>
 80002fa:	4282      	cmp	r2, r0
 80002fc:	f200 80f9 	bhi.w	80004f2 <__udivmoddi4+0x2c6>
 8000300:	1a84      	subs	r4, r0, r2
 8000302:	eb61 0303 	sbc.w	r3, r1, r3
 8000306:	2001      	movs	r0, #1
 8000308:	469e      	mov	lr, r3
 800030a:	2d00      	cmp	r5, #0
 800030c:	d0e0      	beq.n	80002d0 <__udivmoddi4+0xa4>
 800030e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000312:	e7dd      	b.n	80002d0 <__udivmoddi4+0xa4>
 8000314:	b902      	cbnz	r2, 8000318 <__udivmoddi4+0xec>
 8000316:	deff      	udf	#255	; 0xff
 8000318:	fab2 f282 	clz	r2, r2
 800031c:	2a00      	cmp	r2, #0
 800031e:	f040 8092 	bne.w	8000446 <__udivmoddi4+0x21a>
 8000322:	eba1 010c 	sub.w	r1, r1, ip
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2601      	movs	r6, #1
 8000330:	0c20      	lsrs	r0, r4, #16
 8000332:	fbb1 f3f7 	udiv	r3, r1, r7
 8000336:	fb07 1113 	mls	r1, r7, r3, r1
 800033a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800033e:	fb0e f003 	mul.w	r0, lr, r3
 8000342:	4288      	cmp	r0, r1
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x12c>
 8000346:	eb1c 0101 	adds.w	r1, ip, r1
 800034a:	f103 38ff 	add.w	r8, r3, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x12a>
 8000350:	4288      	cmp	r0, r1
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2c0>
 8000356:	4643      	mov	r3, r8
 8000358:	1a09      	subs	r1, r1, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000360:	fb07 1110 	mls	r1, r7, r0, r1
 8000364:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x156>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 31ff 	add.w	r1, r0, #4294967295
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x154>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2ca>
 8000380:	4608      	mov	r0, r1
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800038a:	e79c      	b.n	80002c6 <__udivmoddi4+0x9a>
 800038c:	f1c6 0720 	rsb	r7, r6, #32
 8000390:	40b3      	lsls	r3, r6
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa20 f407 	lsr.w	r4, r0, r7
 800039e:	fa01 f306 	lsl.w	r3, r1, r6
 80003a2:	431c      	orrs	r4, r3
 80003a4:	40f9      	lsrs	r1, r7
 80003a6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003aa:	fa00 f306 	lsl.w	r3, r0, r6
 80003ae:	fbb1 f8f9 	udiv	r8, r1, r9
 80003b2:	0c20      	lsrs	r0, r4, #16
 80003b4:	fa1f fe8c 	uxth.w	lr, ip
 80003b8:	fb09 1118 	mls	r1, r9, r8, r1
 80003bc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c0:	fb08 f00e 	mul.w	r0, r8, lr
 80003c4:	4288      	cmp	r0, r1
 80003c6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b8>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2bc>
 80003d8:	4288      	cmp	r0, r1
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2bc>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4461      	add	r1, ip
 80003e4:	1a09      	subs	r1, r1, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003ec:	fb09 1110 	mls	r1, r9, r0, r1
 80003f0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003f8:	458e      	cmp	lr, r1
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1e2>
 80003fc:	eb1c 0101 	adds.w	r1, ip, r1
 8000400:	f100 34ff 	add.w	r4, r0, #4294967295
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2b4>
 8000406:	458e      	cmp	lr, r1
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2b4>
 800040a:	3802      	subs	r0, #2
 800040c:	4461      	add	r1, ip
 800040e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000412:	fba0 9402 	umull	r9, r4, r0, r2
 8000416:	eba1 010e 	sub.w	r1, r1, lr
 800041a:	42a1      	cmp	r1, r4
 800041c:	46c8      	mov	r8, r9
 800041e:	46a6      	mov	lr, r4
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x2a4>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x2a0>
 8000424:	b15d      	cbz	r5, 800043e <__udivmoddi4+0x212>
 8000426:	ebb3 0208 	subs.w	r2, r3, r8
 800042a:	eb61 010e 	sbc.w	r1, r1, lr
 800042e:	fa01 f707 	lsl.w	r7, r1, r7
 8000432:	fa22 f306 	lsr.w	r3, r2, r6
 8000436:	40f1      	lsrs	r1, r6
 8000438:	431f      	orrs	r7, r3
 800043a:	e9c5 7100 	strd	r7, r1, [r5]
 800043e:	2600      	movs	r6, #0
 8000440:	4631      	mov	r1, r6
 8000442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000446:	f1c2 0320 	rsb	r3, r2, #32
 800044a:	40d8      	lsrs	r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa21 f303 	lsr.w	r3, r1, r3
 8000454:	4091      	lsls	r1, r2
 8000456:	4301      	orrs	r1, r0
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb3 f0f7 	udiv	r0, r3, r7
 8000464:	fb07 3610 	mls	r6, r7, r0, r3
 8000468:	0c0b      	lsrs	r3, r1, #16
 800046a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800046e:	fb00 f60e 	mul.w	r6, r0, lr
 8000472:	429e      	cmp	r6, r3
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x260>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b8>
 8000484:	429e      	cmp	r6, r3
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b8>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1b9b      	subs	r3, r3, r6
 800048e:	b289      	uxth	r1, r1
 8000490:	fbb3 f6f7 	udiv	r6, r3, r7
 8000494:	fb07 3316 	mls	r3, r7, r6, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb06 f30e 	mul.w	r3, r6, lr
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x28a>
 80004a4:	eb1c 0101 	adds.w	r1, ip, r1
 80004a8:	f106 38ff 	add.w	r8, r6, #4294967295
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2b0>
 80004b2:	3e02      	subs	r6, #2
 80004b4:	4461      	add	r1, ip
 80004b6:	1ac9      	subs	r1, r1, r3
 80004b8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0x104>
 80004be:	462e      	mov	r6, r5
 80004c0:	4628      	mov	r0, r5
 80004c2:	e705      	b.n	80002d0 <__udivmoddi4+0xa4>
 80004c4:	4606      	mov	r6, r0
 80004c6:	e6e3      	b.n	8000290 <__udivmoddi4+0x64>
 80004c8:	4618      	mov	r0, r3
 80004ca:	e6f8      	b.n	80002be <__udivmoddi4+0x92>
 80004cc:	454b      	cmp	r3, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f8>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004d8:	3801      	subs	r0, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f8>
 80004dc:	4646      	mov	r6, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x28a>
 80004e0:	4620      	mov	r0, r4
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1e2>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x260>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b8>
 80004ec:	3b02      	subs	r3, #2
 80004ee:	4461      	add	r1, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x12c>
 80004f2:	4630      	mov	r0, r6
 80004f4:	e709      	b.n	800030a <__udivmoddi4+0xde>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x156>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b08a      	sub	sp, #40	; 0x28
 8000504:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000506:	f107 0314 	add.w	r3, r7, #20
 800050a:	2200      	movs	r2, #0
 800050c:	601a      	str	r2, [r3, #0]
 800050e:	605a      	str	r2, [r3, #4]
 8000510:	609a      	str	r2, [r3, #8]
 8000512:	60da      	str	r2, [r3, #12]
 8000514:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000516:	2300      	movs	r3, #0
 8000518:	613b      	str	r3, [r7, #16]
 800051a:	4b35      	ldr	r3, [pc, #212]	; (80005f0 <MX_GPIO_Init+0xf0>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051e:	4a34      	ldr	r2, [pc, #208]	; (80005f0 <MX_GPIO_Init+0xf0>)
 8000520:	f043 0304 	orr.w	r3, r3, #4
 8000524:	6313      	str	r3, [r2, #48]	; 0x30
 8000526:	4b32      	ldr	r3, [pc, #200]	; (80005f0 <MX_GPIO_Init+0xf0>)
 8000528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052a:	f003 0304 	and.w	r3, r3, #4
 800052e:	613b      	str	r3, [r7, #16]
 8000530:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000532:	2300      	movs	r3, #0
 8000534:	60fb      	str	r3, [r7, #12]
 8000536:	4b2e      	ldr	r3, [pc, #184]	; (80005f0 <MX_GPIO_Init+0xf0>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053a:	4a2d      	ldr	r2, [pc, #180]	; (80005f0 <MX_GPIO_Init+0xf0>)
 800053c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000540:	6313      	str	r3, [r2, #48]	; 0x30
 8000542:	4b2b      	ldr	r3, [pc, #172]	; (80005f0 <MX_GPIO_Init+0xf0>)
 8000544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000546:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800054a:	60fb      	str	r3, [r7, #12]
 800054c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800054e:	2300      	movs	r3, #0
 8000550:	60bb      	str	r3, [r7, #8]
 8000552:	4b27      	ldr	r3, [pc, #156]	; (80005f0 <MX_GPIO_Init+0xf0>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000556:	4a26      	ldr	r2, [pc, #152]	; (80005f0 <MX_GPIO_Init+0xf0>)
 8000558:	f043 0308 	orr.w	r3, r3, #8
 800055c:	6313      	str	r3, [r2, #48]	; 0x30
 800055e:	4b24      	ldr	r3, [pc, #144]	; (80005f0 <MX_GPIO_Init+0xf0>)
 8000560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000562:	f003 0308 	and.w	r3, r3, #8
 8000566:	60bb      	str	r3, [r7, #8]
 8000568:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800056a:	2300      	movs	r3, #0
 800056c:	607b      	str	r3, [r7, #4]
 800056e:	4b20      	ldr	r3, [pc, #128]	; (80005f0 <MX_GPIO_Init+0xf0>)
 8000570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000572:	4a1f      	ldr	r2, [pc, #124]	; (80005f0 <MX_GPIO_Init+0xf0>)
 8000574:	f043 0301 	orr.w	r3, r3, #1
 8000578:	6313      	str	r3, [r2, #48]	; 0x30
 800057a:	4b1d      	ldr	r3, [pc, #116]	; (80005f0 <MX_GPIO_Init+0xf0>)
 800057c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057e:	f003 0301 	and.w	r3, r3, #1
 8000582:	607b      	str	r3, [r7, #4]
 8000584:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000586:	2300      	movs	r3, #0
 8000588:	603b      	str	r3, [r7, #0]
 800058a:	4b19      	ldr	r3, [pc, #100]	; (80005f0 <MX_GPIO_Init+0xf0>)
 800058c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058e:	4a18      	ldr	r2, [pc, #96]	; (80005f0 <MX_GPIO_Init+0xf0>)
 8000590:	f043 0302 	orr.w	r3, r3, #2
 8000594:	6313      	str	r3, [r2, #48]	; 0x30
 8000596:	4b16      	ldr	r3, [pc, #88]	; (80005f0 <MX_GPIO_Init+0xf0>)
 8000598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059a:	f003 0302 	and.w	r3, r3, #2
 800059e:	603b      	str	r3, [r7, #0]
 80005a0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80005a2:	2200      	movs	r2, #0
 80005a4:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80005a8:	4812      	ldr	r0, [pc, #72]	; (80005f4 <MX_GPIO_Init+0xf4>)
 80005aa:	f000 fded 	bl	8001188 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80005ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80005b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005b4:	2300      	movs	r3, #0
 80005b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b8:	2300      	movs	r3, #0
 80005ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005bc:	f107 0314 	add.w	r3, r7, #20
 80005c0:	4619      	mov	r1, r3
 80005c2:	480d      	ldr	r0, [pc, #52]	; (80005f8 <MX_GPIO_Init+0xf8>)
 80005c4:	f000 fc1c 	bl	8000e00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80005c8:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80005cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ce:	2301      	movs	r3, #1
 80005d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d2:	2300      	movs	r3, #0
 80005d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d6:	2300      	movs	r3, #0
 80005d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80005da:	f107 0314 	add.w	r3, r7, #20
 80005de:	4619      	mov	r1, r3
 80005e0:	4804      	ldr	r0, [pc, #16]	; (80005f4 <MX_GPIO_Init+0xf4>)
 80005e2:	f000 fc0d 	bl	8000e00 <HAL_GPIO_Init>

}
 80005e6:	bf00      	nop
 80005e8:	3728      	adds	r7, #40	; 0x28
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	40023800 	.word	0x40023800
 80005f4:	40020c00 	.word	0x40020c00
 80005f8:	40020800 	.word	0x40020800

080005fc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80005fc:	b580      	push	{r7, lr}
 80005fe:	f5ad 5d1c 	sub.w	sp, sp, #9984	; 0x2700
 8000602:	b08c      	sub	sp, #48	; 0x30
 8000604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  initialise_monitor_handles();
 8000606:	f001 fc73 	bl	8001ef0 <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060a:	f000 fa7d 	bl	8000b08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800060e:	f000 f941 	bl	8000894 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000612:	f7ff ff75 	bl	8000500 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE BEGIN 2 */
  _Bool is_long_press = 0;
 8000616:	2300      	movs	r3, #0
 8000618:	f507 521c 	add.w	r2, r7, #9984	; 0x2700
 800061c:	f102 022f 	add.w	r2, r2, #47	; 0x2f
 8000620:	7013      	strb	r3, [r2, #0]
  int last_pressed = 0;
 8000622:	2300      	movs	r3, #0
 8000624:	f507 521c 	add.w	r2, r7, #9984	; 0x2700
 8000628:	f102 0228 	add.w	r2, r2, #40	; 0x28
 800062c:	6013      	str	r3, [r2, #0]
  int wait = 500;
 800062e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000632:	f507 521c 	add.w	r2, r7, #9984	; 0x2700
 8000636:	f102 0214 	add.w	r2, r2, #20
 800063a:	6013      	str	r3, [r2, #0]
  int cnt = 0;
 800063c:	2300      	movs	r3, #0
 800063e:	f507 521c 	add.w	r2, r7, #9984	; 0x2700
 8000642:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8000646:	6013      	str	r3, [r2, #0]
  uint32_t input_timeout = 5000;
 8000648:	f241 3388 	movw	r3, #5000	; 0x1388
 800064c:	f507 521c 	add.w	r2, r7, #9984	; 0x2700
 8000650:	f102 0210 	add.w	r2, r2, #16
 8000654:	6013      	str	r3, [r2, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
	int was_pressed = 0;
 8000656:	2300      	movs	r3, #0
 8000658:	f507 521c 	add.w	r2, r7, #9984	; 0x2700
 800065c:	f102 0220 	add.w	r2, r2, #32
 8000660:	6013      	str	r3, [r2, #0]
    _Bool states[10000];
    int button_state = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15);
 8000662:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000666:	4887      	ldr	r0, [pc, #540]	; (8000884 <main+0x288>)
 8000668:	f000 fd76 	bl	8001158 <HAL_GPIO_ReadPin>
 800066c:	4603      	mov	r3, r0
 800066e:	f507 521c 	add.w	r2, r7, #9984	; 0x2700
 8000672:	f102 021c 	add.w	r2, r2, #28
 8000676:	6013      	str	r3, [r2, #0]
    is_long_press = 0;
 8000678:	2300      	movs	r3, #0
 800067a:	f507 521c 	add.w	r2, r7, #9984	; 0x2700
 800067e:	f102 022f 	add.w	r2, r2, #47	; 0x2f
 8000682:	7013      	strb	r3, [r2, #0]
    if (!button_state) {
 8000684:	f507 531c 	add.w	r3, r7, #9984	; 0x2700
 8000688:	f103 031c 	add.w	r3, r3, #28
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d12f      	bne.n	80006f2 <main+0xf6>
      last_pressed = HAL_GetTick();
 8000692:	f000 fa9f 	bl	8000bd4 <HAL_GetTick>
 8000696:	4603      	mov	r3, r0
 8000698:	f507 521c 	add.w	r2, r7, #9984	; 0x2700
 800069c:	f102 0228 	add.w	r2, r2, #40	; 0x28
 80006a0:	6013      	str	r3, [r2, #0]
    }
    while (!button_state) {
 80006a2:	e026      	b.n	80006f2 <main+0xf6>
      was_pressed = 1;
 80006a4:	2301      	movs	r3, #1
 80006a6:	f507 521c 	add.w	r2, r7, #9984	; 0x2700
 80006aa:	f102 0220 	add.w	r2, r2, #32
 80006ae:	6013      	str	r3, [r2, #0]
      if (HAL_GetTick() - last_pressed >= wait) {
 80006b0:	f000 fa90 	bl	8000bd4 <HAL_GetTick>
 80006b4:	4602      	mov	r2, r0
 80006b6:	f507 531c 	add.w	r3, r7, #9984	; 0x2700
 80006ba:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	1ad2      	subs	r2, r2, r3
 80006c2:	f507 531c 	add.w	r3, r7, #9984	; 0x2700
 80006c6:	f103 0314 	add.w	r3, r3, #20
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	429a      	cmp	r2, r3
 80006ce:	d305      	bcc.n	80006dc <main+0xe0>
        is_long_press = 1;
 80006d0:	2301      	movs	r3, #1
 80006d2:	f507 521c 	add.w	r2, r7, #9984	; 0x2700
 80006d6:	f102 022f 	add.w	r2, r2, #47	; 0x2f
 80006da:	7013      	strb	r3, [r2, #0]
      }
      button_state = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15);
 80006dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006e0:	4868      	ldr	r0, [pc, #416]	; (8000884 <main+0x288>)
 80006e2:	f000 fd39 	bl	8001158 <HAL_GPIO_ReadPin>
 80006e6:	4603      	mov	r3, r0
 80006e8:	f507 521c 	add.w	r2, r7, #9984	; 0x2700
 80006ec:	f102 021c 	add.w	r2, r2, #28
 80006f0:	6013      	str	r3, [r2, #0]
    while (!button_state) {
 80006f2:	f507 531c 	add.w	r3, r7, #9984	; 0x2700
 80006f6:	f103 031c 	add.w	r3, r3, #28
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d0d1      	beq.n	80006a4 <main+0xa8>
    }

    if (was_pressed) {
 8000700:	f507 531c 	add.w	r3, r7, #9984	; 0x2700
 8000704:	f103 0320 	add.w	r3, r3, #32
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d051      	beq.n	80007b2 <main+0x1b6>
      if (!is_long_press) {
 800070e:	f507 531c 	add.w	r3, r7, #9984	; 0x2700
 8000712:	f103 032f 	add.w	r3, r3, #47	; 0x2f
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	f083 0301 	eor.w	r3, r3, #1
 800071c:	b2db      	uxtb	r3, r3
 800071e:	2b00      	cmp	r3, #0
 8000720:	d01e      	beq.n	8000760 <main+0x164>
    	printf("short pressed\n");
 8000722:	4859      	ldr	r0, [pc, #356]	; (8000888 <main+0x28c>)
 8000724:	f001 fe8e 	bl	8002444 <puts>
        states[cnt] = false;
 8000728:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 800072c:	f5a3 62e6 	sub.w	r2, r3, #1840	; 0x730
 8000730:	f507 531c 	add.w	r3, r7, #9984	; 0x2700
 8000734:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	4413      	add	r3, r2
 800073c:	2200      	movs	r2, #0
 800073e:	701a      	strb	r2, [r3, #0]
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000740:	2201      	movs	r2, #1
 8000742:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000746:	4851      	ldr	r0, [pc, #324]	; (800088c <main+0x290>)
 8000748:	f000 fd1e 	bl	8001188 <HAL_GPIO_WritePin>
        HAL_Delay(250);
 800074c:	20fa      	movs	r0, #250	; 0xfa
 800074e:	f000 fa4d 	bl	8000bec <HAL_Delay>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000752:	2200      	movs	r2, #0
 8000754:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000758:	484c      	ldr	r0, [pc, #304]	; (800088c <main+0x290>)
 800075a:	f000 fd15 	bl	8001188 <HAL_GPIO_WritePin>
 800075e:	e01d      	b.n	800079c <main+0x1a0>
      } else {
      	printf("long pressed\n");
 8000760:	484b      	ldr	r0, [pc, #300]	; (8000890 <main+0x294>)
 8000762:	f001 fe6f 	bl	8002444 <puts>
        states[cnt] = true;
 8000766:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 800076a:	f5a3 62e6 	sub.w	r2, r3, #1840	; 0x730
 800076e:	f507 531c 	add.w	r3, r7, #9984	; 0x2700
 8000772:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4413      	add	r3, r2
 800077a:	2201      	movs	r2, #1
 800077c:	701a      	strb	r2, [r3, #0]
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 800077e:	2201      	movs	r2, #1
 8000780:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000784:	4841      	ldr	r0, [pc, #260]	; (800088c <main+0x290>)
 8000786:	f000 fcff 	bl	8001188 <HAL_GPIO_WritePin>
        HAL_Delay(250);
 800078a:	20fa      	movs	r0, #250	; 0xfa
 800078c:	f000 fa2e 	bl	8000bec <HAL_Delay>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000790:	2200      	movs	r2, #0
 8000792:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000796:	483d      	ldr	r0, [pc, #244]	; (800088c <main+0x290>)
 8000798:	f000 fcf6 	bl	8001188 <HAL_GPIO_WritePin>
      }
      cnt++;
 800079c:	f507 531c 	add.w	r3, r7, #9984	; 0x2700
 80007a0:	f103 0324 	add.w	r3, r3, #36	; 0x24
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	3301      	adds	r3, #1
 80007a8:	f507 521c 	add.w	r2, r7, #9984	; 0x2700
 80007ac:	f102 0224 	add.w	r2, r2, #36	; 0x24
 80007b0:	6013      	str	r3, [r2, #0]
    }
    if (cnt != 0 && (HAL_GetTick() - last_pressed >= input_timeout)) {
 80007b2:	f507 531c 	add.w	r3, r7, #9984	; 0x2700
 80007b6:	f103 0324 	add.w	r3, r3, #36	; 0x24
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	f43f af4a 	beq.w	8000656 <main+0x5a>
 80007c2:	f000 fa07 	bl	8000bd4 <HAL_GetTick>
 80007c6:	4602      	mov	r2, r0
 80007c8:	f507 531c 	add.w	r3, r7, #9984	; 0x2700
 80007cc:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	1ad3      	subs	r3, r2, r3
 80007d4:	f507 521c 	add.w	r2, r7, #9984	; 0x2700
 80007d8:	f102 0210 	add.w	r2, r2, #16
 80007dc:	6812      	ldr	r2, [r2, #0]
 80007de:	429a      	cmp	r2, r3
 80007e0:	f63f af39 	bhi.w	8000656 <main+0x5a>
      for (int i = 0; i < cnt; i++) {
 80007e4:	2300      	movs	r3, #0
 80007e6:	f507 521c 	add.w	r2, r7, #9984	; 0x2700
 80007ea:	f102 0218 	add.w	r2, r2, #24
 80007ee:	6013      	str	r3, [r2, #0]
 80007f0:	e034      	b.n	800085c <main+0x260>
        if (states[i]) {
 80007f2:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 80007f6:	f5a3 62e6 	sub.w	r2, r3, #1840	; 0x730
 80007fa:	f507 531c 	add.w	r3, r7, #9984	; 0x2700
 80007fe:	f103 0318 	add.w	r3, r3, #24
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4413      	add	r3, r2
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	2b00      	cmp	r3, #0
 800080a:	d00a      	beq.n	8000822 <main+0x226>
          HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 800080c:	2201      	movs	r2, #1
 800080e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000812:	481e      	ldr	r0, [pc, #120]	; (800088c <main+0x290>)
 8000814:	f000 fcb8 	bl	8001188 <HAL_GPIO_WritePin>
          HAL_Delay(1000);
 8000818:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800081c:	f000 f9e6 	bl	8000bec <HAL_Delay>
 8000820:	e008      	b.n	8000834 <main+0x238>
        } else {
          HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000822:	2201      	movs	r2, #1
 8000824:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000828:	4818      	ldr	r0, [pc, #96]	; (800088c <main+0x290>)
 800082a:	f000 fcad 	bl	8001188 <HAL_GPIO_WritePin>
          HAL_Delay(250);
 800082e:	20fa      	movs	r0, #250	; 0xfa
 8000830:	f000 f9dc 	bl	8000bec <HAL_Delay>
        }
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000834:	2200      	movs	r2, #0
 8000836:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800083a:	4814      	ldr	r0, [pc, #80]	; (800088c <main+0x290>)
 800083c:	f000 fca4 	bl	8001188 <HAL_GPIO_WritePin>
        HAL_Delay(250);
 8000840:	20fa      	movs	r0, #250	; 0xfa
 8000842:	f000 f9d3 	bl	8000bec <HAL_Delay>
      for (int i = 0; i < cnt; i++) {
 8000846:	f507 531c 	add.w	r3, r7, #9984	; 0x2700
 800084a:	f103 0318 	add.w	r3, r3, #24
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	3301      	adds	r3, #1
 8000852:	f507 521c 	add.w	r2, r7, #9984	; 0x2700
 8000856:	f102 0218 	add.w	r2, r2, #24
 800085a:	6013      	str	r3, [r2, #0]
 800085c:	f507 531c 	add.w	r3, r7, #9984	; 0x2700
 8000860:	f103 0318 	add.w	r3, r3, #24
 8000864:	681a      	ldr	r2, [r3, #0]
 8000866:	f507 531c 	add.w	r3, r7, #9984	; 0x2700
 800086a:	f103 0324 	add.w	r3, r3, #36	; 0x24
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	429a      	cmp	r2, r3
 8000872:	dbbe      	blt.n	80007f2 <main+0x1f6>
      }
      cnt = 0;
 8000874:	2300      	movs	r3, #0
 8000876:	f507 521c 	add.w	r2, r7, #9984	; 0x2700
 800087a:	f102 0224 	add.w	r2, r2, #36	; 0x24
 800087e:	6013      	str	r3, [r2, #0]
  while (1) {
 8000880:	e6e9      	b.n	8000656 <main+0x5a>
 8000882:	bf00      	nop
 8000884:	40020800 	.word	0x40020800
 8000888:	08002a64 	.word	0x08002a64
 800088c:	40020c00 	.word	0x40020c00
 8000890:	08002a74 	.word	0x08002a74

08000894 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000894:	b580      	push	{r7, lr}
 8000896:	b094      	sub	sp, #80	; 0x50
 8000898:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {
 800089a:	f107 0320 	add.w	r3, r7, #32
 800089e:	2230      	movs	r2, #48	; 0x30
 80008a0:	2100      	movs	r1, #0
 80008a2:	4618      	mov	r0, r3
 80008a4:	f001 fcc3 	bl	800222e <memset>
    0
  };
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {
 80008a8:	f107 030c 	add.w	r3, r7, #12
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	605a      	str	r2, [r3, #4]
 80008b2:	609a      	str	r2, [r3, #8]
 80008b4:	60da      	str	r2, [r3, #12]
 80008b6:	611a      	str	r2, [r3, #16]
    0
  };

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008b8:	2300      	movs	r3, #0
 80008ba:	60bb      	str	r3, [r7, #8]
 80008bc:	4b2b      	ldr	r3, [pc, #172]	; (800096c <SystemClock_Config+0xd8>)
 80008be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c0:	4a2a      	ldr	r2, [pc, #168]	; (800096c <SystemClock_Config+0xd8>)
 80008c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008c6:	6413      	str	r3, [r2, #64]	; 0x40
 80008c8:	4b28      	ldr	r3, [pc, #160]	; (800096c <SystemClock_Config+0xd8>)
 80008ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008d0:	60bb      	str	r3, [r7, #8]
 80008d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008d4:	2300      	movs	r3, #0
 80008d6:	607b      	str	r3, [r7, #4]
 80008d8:	4b25      	ldr	r3, [pc, #148]	; (8000970 <SystemClock_Config+0xdc>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a24      	ldr	r2, [pc, #144]	; (8000970 <SystemClock_Config+0xdc>)
 80008de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008e2:	6013      	str	r3, [r2, #0]
 80008e4:	4b22      	ldr	r3, [pc, #136]	; (8000970 <SystemClock_Config+0xdc>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008ec:	607b      	str	r3, [r7, #4]
 80008ee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008f0:	2301      	movs	r3, #1
 80008f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008f8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008fa:	2302      	movs	r3, #2
 80008fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000902:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000904:	230f      	movs	r3, #15
 8000906:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000908:	23d8      	movs	r3, #216	; 0xd8
 800090a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800090c:	2302      	movs	r3, #2
 800090e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000910:	2304      	movs	r3, #4
 8000912:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig( & RCC_OscInitStruct) != HAL_OK) {
 8000914:	f107 0320 	add.w	r3, r7, #32
 8000918:	4618      	mov	r0, r3
 800091a:	f000 fc9f 	bl	800125c <HAL_RCC_OscConfig>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <SystemClock_Config+0x94>
    Error_Handler();
 8000924:	f000 f826 	bl	8000974 <Error_Handler>
  }

  /** Activate the Over-Drive mode
   */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 8000928:	f000 fc48 	bl	80011bc <HAL_PWREx_EnableOverDrive>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <SystemClock_Config+0xa2>
    Error_Handler();
 8000932:	f000 f81f 	bl	8000974 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 8000936:	230f      	movs	r3, #15
 8000938:	60fb      	str	r3, [r7, #12]
    RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800093a:	2302      	movs	r3, #2
 800093c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800093e:	2300      	movs	r3, #0
 8000940:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000942:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000946:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000948:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800094c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig( & RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 800094e:	f107 030c 	add.w	r3, r7, #12
 8000952:	2105      	movs	r1, #5
 8000954:	4618      	mov	r0, r3
 8000956:	f000 fef9 	bl	800174c <HAL_RCC_ClockConfig>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <SystemClock_Config+0xd0>
    Error_Handler();
 8000960:	f000 f808 	bl	8000974 <Error_Handler>
  }
}
 8000964:	bf00      	nop
 8000966:	3750      	adds	r7, #80	; 0x50
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	40023800 	.word	0x40023800
 8000970:	40007000 	.word	0x40007000

08000974 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000978:	b672      	cpsid	i
}
 800097a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {}
 800097c:	e7fe      	b.n	800097c <Error_Handler+0x8>
	...

08000980 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000980:	b480      	push	{r7}
 8000982:	b083      	sub	sp, #12
 8000984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	607b      	str	r3, [r7, #4]
 800098a:	4b10      	ldr	r3, [pc, #64]	; (80009cc <HAL_MspInit+0x4c>)
 800098c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800098e:	4a0f      	ldr	r2, [pc, #60]	; (80009cc <HAL_MspInit+0x4c>)
 8000990:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000994:	6453      	str	r3, [r2, #68]	; 0x44
 8000996:	4b0d      	ldr	r3, [pc, #52]	; (80009cc <HAL_MspInit+0x4c>)
 8000998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800099a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800099e:	607b      	str	r3, [r7, #4]
 80009a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	603b      	str	r3, [r7, #0]
 80009a6:	4b09      	ldr	r3, [pc, #36]	; (80009cc <HAL_MspInit+0x4c>)
 80009a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009aa:	4a08      	ldr	r2, [pc, #32]	; (80009cc <HAL_MspInit+0x4c>)
 80009ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009b0:	6413      	str	r3, [r2, #64]	; 0x40
 80009b2:	4b06      	ldr	r3, [pc, #24]	; (80009cc <HAL_MspInit+0x4c>)
 80009b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ba:	603b      	str	r3, [r7, #0]
 80009bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009be:	bf00      	nop
 80009c0:	370c      	adds	r7, #12
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	40023800 	.word	0x40023800

080009d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009d4:	e7fe      	b.n	80009d4 <NMI_Handler+0x4>

080009d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009d6:	b480      	push	{r7}
 80009d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009da:	e7fe      	b.n	80009da <HardFault_Handler+0x4>

080009dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009e0:	e7fe      	b.n	80009e0 <MemManage_Handler+0x4>

080009e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009e2:	b480      	push	{r7}
 80009e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009e6:	e7fe      	b.n	80009e6 <BusFault_Handler+0x4>

080009e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009ec:	e7fe      	b.n	80009ec <UsageFault_Handler+0x4>

080009ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009ee:	b480      	push	{r7}
 80009f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009f2:	bf00      	nop
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr

080009fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a00:	bf00      	nop
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr

08000a0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a0a:	b480      	push	{r7}
 8000a0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a0e:	bf00      	nop
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr

08000a18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a1c:	f000 f8c6 	bl	8000bac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a20:	bf00      	nop
 8000a22:	bd80      	pop	{r7, pc}

08000a24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b086      	sub	sp, #24
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a2c:	4a14      	ldr	r2, [pc, #80]	; (8000a80 <_sbrk+0x5c>)
 8000a2e:	4b15      	ldr	r3, [pc, #84]	; (8000a84 <_sbrk+0x60>)
 8000a30:	1ad3      	subs	r3, r2, r3
 8000a32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a38:	4b13      	ldr	r3, [pc, #76]	; (8000a88 <_sbrk+0x64>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d102      	bne.n	8000a46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a40:	4b11      	ldr	r3, [pc, #68]	; (8000a88 <_sbrk+0x64>)
 8000a42:	4a12      	ldr	r2, [pc, #72]	; (8000a8c <_sbrk+0x68>)
 8000a44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a46:	4b10      	ldr	r3, [pc, #64]	; (8000a88 <_sbrk+0x64>)
 8000a48:	681a      	ldr	r2, [r3, #0]
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	4413      	add	r3, r2
 8000a4e:	693a      	ldr	r2, [r7, #16]
 8000a50:	429a      	cmp	r2, r3
 8000a52:	d207      	bcs.n	8000a64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a54:	f001 fac8 	bl	8001fe8 <__errno>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	220c      	movs	r2, #12
 8000a5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a62:	e009      	b.n	8000a78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a64:	4b08      	ldr	r3, [pc, #32]	; (8000a88 <_sbrk+0x64>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a6a:	4b07      	ldr	r3, [pc, #28]	; (8000a88 <_sbrk+0x64>)
 8000a6c:	681a      	ldr	r2, [r3, #0]
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	4413      	add	r3, r2
 8000a72:	4a05      	ldr	r2, [pc, #20]	; (8000a88 <_sbrk+0x64>)
 8000a74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a76:	68fb      	ldr	r3, [r7, #12]
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	3718      	adds	r7, #24
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	20030000 	.word	0x20030000
 8000a84:	00000400 	.word	0x00000400
 8000a88:	20000094 	.word	0x20000094
 8000a8c:	20000158 	.word	0x20000158

08000a90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a94:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <SystemInit+0x20>)
 8000a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a9a:	4a05      	ldr	r2, [pc, #20]	; (8000ab0 <SystemInit+0x20>)
 8000a9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000aa0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	e000ed00 	.word	0xe000ed00

08000ab4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ab4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000aec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ab8:	480d      	ldr	r0, [pc, #52]	; (8000af0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000aba:	490e      	ldr	r1, [pc, #56]	; (8000af4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000abc:	4a0e      	ldr	r2, [pc, #56]	; (8000af8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000abe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ac0:	e002      	b.n	8000ac8 <LoopCopyDataInit>

08000ac2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ac2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ac4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ac6:	3304      	adds	r3, #4

08000ac8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ac8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000acc:	d3f9      	bcc.n	8000ac2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ace:	4a0b      	ldr	r2, [pc, #44]	; (8000afc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ad0:	4c0b      	ldr	r4, [pc, #44]	; (8000b00 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ad2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ad4:	e001      	b.n	8000ada <LoopFillZerobss>

08000ad6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ad6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ad8:	3204      	adds	r2, #4

08000ada <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ada:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000adc:	d3fb      	bcc.n	8000ad6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ade:	f7ff ffd7 	bl	8000a90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ae2:	f001 fb7d 	bl	80021e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ae6:	f7ff fd89 	bl	80005fc <main>
  bx  lr    
 8000aea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000aec:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000af0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000af4:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000af8:	08002b24 	.word	0x08002b24
  ldr r2, =_sbss
 8000afc:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000b00:	20000158 	.word	0x20000158

08000b04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b04:	e7fe      	b.n	8000b04 <ADC_IRQHandler>
	...

08000b08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b0c:	4b0e      	ldr	r3, [pc, #56]	; (8000b48 <HAL_Init+0x40>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a0d      	ldr	r2, [pc, #52]	; (8000b48 <HAL_Init+0x40>)
 8000b12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b18:	4b0b      	ldr	r3, [pc, #44]	; (8000b48 <HAL_Init+0x40>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a0a      	ldr	r2, [pc, #40]	; (8000b48 <HAL_Init+0x40>)
 8000b1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b24:	4b08      	ldr	r3, [pc, #32]	; (8000b48 <HAL_Init+0x40>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a07      	ldr	r2, [pc, #28]	; (8000b48 <HAL_Init+0x40>)
 8000b2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b30:	2003      	movs	r0, #3
 8000b32:	f000 f931 	bl	8000d98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b36:	200f      	movs	r0, #15
 8000b38:	f000 f808 	bl	8000b4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b3c:	f7ff ff20 	bl	8000980 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b40:	2300      	movs	r3, #0
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	40023c00 	.word	0x40023c00

08000b4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b54:	4b12      	ldr	r3, [pc, #72]	; (8000ba0 <HAL_InitTick+0x54>)
 8000b56:	681a      	ldr	r2, [r3, #0]
 8000b58:	4b12      	ldr	r3, [pc, #72]	; (8000ba4 <HAL_InitTick+0x58>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b62:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f000 f93b 	bl	8000de6 <HAL_SYSTICK_Config>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b76:	2301      	movs	r3, #1
 8000b78:	e00e      	b.n	8000b98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	2b0f      	cmp	r3, #15
 8000b7e:	d80a      	bhi.n	8000b96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b80:	2200      	movs	r2, #0
 8000b82:	6879      	ldr	r1, [r7, #4]
 8000b84:	f04f 30ff 	mov.w	r0, #4294967295
 8000b88:	f000 f911 	bl	8000dae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b8c:	4a06      	ldr	r2, [pc, #24]	; (8000ba8 <HAL_InitTick+0x5c>)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b92:	2300      	movs	r3, #0
 8000b94:	e000      	b.n	8000b98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b96:	2301      	movs	r3, #1
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	3708      	adds	r7, #8
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	20000000 	.word	0x20000000
 8000ba4:	20000008 	.word	0x20000008
 8000ba8:	20000004 	.word	0x20000004

08000bac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bb0:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <HAL_IncTick+0x20>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	461a      	mov	r2, r3
 8000bb6:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <HAL_IncTick+0x24>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4413      	add	r3, r2
 8000bbc:	4a04      	ldr	r2, [pc, #16]	; (8000bd0 <HAL_IncTick+0x24>)
 8000bbe:	6013      	str	r3, [r2, #0]
}
 8000bc0:	bf00      	nop
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	20000008 	.word	0x20000008
 8000bd0:	20000098 	.word	0x20000098

08000bd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  return uwTick;
 8000bd8:	4b03      	ldr	r3, [pc, #12]	; (8000be8 <HAL_GetTick+0x14>)
 8000bda:	681b      	ldr	r3, [r3, #0]
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	20000098 	.word	0x20000098

08000bec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b084      	sub	sp, #16
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bf4:	f7ff ffee 	bl	8000bd4 <HAL_GetTick>
 8000bf8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c04:	d005      	beq.n	8000c12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c06:	4b0a      	ldr	r3, [pc, #40]	; (8000c30 <HAL_Delay+0x44>)
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	4413      	add	r3, r2
 8000c10:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c12:	bf00      	nop
 8000c14:	f7ff ffde 	bl	8000bd4 <HAL_GetTick>
 8000c18:	4602      	mov	r2, r0
 8000c1a:	68bb      	ldr	r3, [r7, #8]
 8000c1c:	1ad3      	subs	r3, r2, r3
 8000c1e:	68fa      	ldr	r2, [r7, #12]
 8000c20:	429a      	cmp	r2, r3
 8000c22:	d8f7      	bhi.n	8000c14 <HAL_Delay+0x28>
  {
  }
}
 8000c24:	bf00      	nop
 8000c26:	bf00      	nop
 8000c28:	3710      	adds	r7, #16
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	20000008 	.word	0x20000008

08000c34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b085      	sub	sp, #20
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	f003 0307 	and.w	r3, r3, #7
 8000c42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c44:	4b0c      	ldr	r3, [pc, #48]	; (8000c78 <__NVIC_SetPriorityGrouping+0x44>)
 8000c46:	68db      	ldr	r3, [r3, #12]
 8000c48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c4a:	68ba      	ldr	r2, [r7, #8]
 8000c4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c50:	4013      	ands	r3, r2
 8000c52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c66:	4a04      	ldr	r2, [pc, #16]	; (8000c78 <__NVIC_SetPriorityGrouping+0x44>)
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	60d3      	str	r3, [r2, #12]
}
 8000c6c:	bf00      	nop
 8000c6e:	3714      	adds	r7, #20
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr
 8000c78:	e000ed00 	.word	0xe000ed00

08000c7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c80:	4b04      	ldr	r3, [pc, #16]	; (8000c94 <__NVIC_GetPriorityGrouping+0x18>)
 8000c82:	68db      	ldr	r3, [r3, #12]
 8000c84:	0a1b      	lsrs	r3, r3, #8
 8000c86:	f003 0307 	and.w	r3, r3, #7
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr
 8000c94:	e000ed00 	.word	0xe000ed00

08000c98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	6039      	str	r1, [r7, #0]
 8000ca2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ca4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	db0a      	blt.n	8000cc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	b2da      	uxtb	r2, r3
 8000cb0:	490c      	ldr	r1, [pc, #48]	; (8000ce4 <__NVIC_SetPriority+0x4c>)
 8000cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb6:	0112      	lsls	r2, r2, #4
 8000cb8:	b2d2      	uxtb	r2, r2
 8000cba:	440b      	add	r3, r1
 8000cbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cc0:	e00a      	b.n	8000cd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	b2da      	uxtb	r2, r3
 8000cc6:	4908      	ldr	r1, [pc, #32]	; (8000ce8 <__NVIC_SetPriority+0x50>)
 8000cc8:	79fb      	ldrb	r3, [r7, #7]
 8000cca:	f003 030f 	and.w	r3, r3, #15
 8000cce:	3b04      	subs	r3, #4
 8000cd0:	0112      	lsls	r2, r2, #4
 8000cd2:	b2d2      	uxtb	r2, r2
 8000cd4:	440b      	add	r3, r1
 8000cd6:	761a      	strb	r2, [r3, #24]
}
 8000cd8:	bf00      	nop
 8000cda:	370c      	adds	r7, #12
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr
 8000ce4:	e000e100 	.word	0xe000e100
 8000ce8:	e000ed00 	.word	0xe000ed00

08000cec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b089      	sub	sp, #36	; 0x24
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	60f8      	str	r0, [r7, #12]
 8000cf4:	60b9      	str	r1, [r7, #8]
 8000cf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	f003 0307 	and.w	r3, r3, #7
 8000cfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d00:	69fb      	ldr	r3, [r7, #28]
 8000d02:	f1c3 0307 	rsb	r3, r3, #7
 8000d06:	2b04      	cmp	r3, #4
 8000d08:	bf28      	it	cs
 8000d0a:	2304      	movcs	r3, #4
 8000d0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	3304      	adds	r3, #4
 8000d12:	2b06      	cmp	r3, #6
 8000d14:	d902      	bls.n	8000d1c <NVIC_EncodePriority+0x30>
 8000d16:	69fb      	ldr	r3, [r7, #28]
 8000d18:	3b03      	subs	r3, #3
 8000d1a:	e000      	b.n	8000d1e <NVIC_EncodePriority+0x32>
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d20:	f04f 32ff 	mov.w	r2, #4294967295
 8000d24:	69bb      	ldr	r3, [r7, #24]
 8000d26:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2a:	43da      	mvns	r2, r3
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	401a      	ands	r2, r3
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d34:	f04f 31ff 	mov.w	r1, #4294967295
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d3e:	43d9      	mvns	r1, r3
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d44:	4313      	orrs	r3, r2
         );
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3724      	adds	r7, #36	; 0x24
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
	...

08000d54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	3b01      	subs	r3, #1
 8000d60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d64:	d301      	bcc.n	8000d6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d66:	2301      	movs	r3, #1
 8000d68:	e00f      	b.n	8000d8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d6a:	4a0a      	ldr	r2, [pc, #40]	; (8000d94 <SysTick_Config+0x40>)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	3b01      	subs	r3, #1
 8000d70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d72:	210f      	movs	r1, #15
 8000d74:	f04f 30ff 	mov.w	r0, #4294967295
 8000d78:	f7ff ff8e 	bl	8000c98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d7c:	4b05      	ldr	r3, [pc, #20]	; (8000d94 <SysTick_Config+0x40>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d82:	4b04      	ldr	r3, [pc, #16]	; (8000d94 <SysTick_Config+0x40>)
 8000d84:	2207      	movs	r2, #7
 8000d86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d88:	2300      	movs	r3, #0
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	e000e010 	.word	0xe000e010

08000d98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000da0:	6878      	ldr	r0, [r7, #4]
 8000da2:	f7ff ff47 	bl	8000c34 <__NVIC_SetPriorityGrouping>
}
 8000da6:	bf00      	nop
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}

08000dae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dae:	b580      	push	{r7, lr}
 8000db0:	b086      	sub	sp, #24
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	4603      	mov	r3, r0
 8000db6:	60b9      	str	r1, [r7, #8]
 8000db8:	607a      	str	r2, [r7, #4]
 8000dba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dc0:	f7ff ff5c 	bl	8000c7c <__NVIC_GetPriorityGrouping>
 8000dc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dc6:	687a      	ldr	r2, [r7, #4]
 8000dc8:	68b9      	ldr	r1, [r7, #8]
 8000dca:	6978      	ldr	r0, [r7, #20]
 8000dcc:	f7ff ff8e 	bl	8000cec <NVIC_EncodePriority>
 8000dd0:	4602      	mov	r2, r0
 8000dd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dd6:	4611      	mov	r1, r2
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f7ff ff5d 	bl	8000c98 <__NVIC_SetPriority>
}
 8000dde:	bf00      	nop
 8000de0:	3718      	adds	r7, #24
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000de6:	b580      	push	{r7, lr}
 8000de8:	b082      	sub	sp, #8
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dee:	6878      	ldr	r0, [r7, #4]
 8000df0:	f7ff ffb0 	bl	8000d54 <SysTick_Config>
 8000df4:	4603      	mov	r3, r0
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
	...

08000e00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b089      	sub	sp, #36	; 0x24
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
 8000e08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e12:	2300      	movs	r3, #0
 8000e14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e16:	2300      	movs	r3, #0
 8000e18:	61fb      	str	r3, [r7, #28]
 8000e1a:	e177      	b.n	800110c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	fa02 f303 	lsl.w	r3, r2, r3
 8000e24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	697a      	ldr	r2, [r7, #20]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e30:	693a      	ldr	r2, [r7, #16]
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	429a      	cmp	r2, r3
 8000e36:	f040 8166 	bne.w	8001106 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	f003 0303 	and.w	r3, r3, #3
 8000e42:	2b01      	cmp	r3, #1
 8000e44:	d005      	beq.n	8000e52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e4e:	2b02      	cmp	r3, #2
 8000e50:	d130      	bne.n	8000eb4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	689b      	ldr	r3, [r3, #8]
 8000e56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e58:	69fb      	ldr	r3, [r7, #28]
 8000e5a:	005b      	lsls	r3, r3, #1
 8000e5c:	2203      	movs	r2, #3
 8000e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e62:	43db      	mvns	r3, r3
 8000e64:	69ba      	ldr	r2, [r7, #24]
 8000e66:	4013      	ands	r3, r2
 8000e68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	68da      	ldr	r2, [r3, #12]
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	005b      	lsls	r3, r3, #1
 8000e72:	fa02 f303 	lsl.w	r3, r2, r3
 8000e76:	69ba      	ldr	r2, [r7, #24]
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	69ba      	ldr	r2, [r7, #24]
 8000e80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e88:	2201      	movs	r2, #1
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e90:	43db      	mvns	r3, r3
 8000e92:	69ba      	ldr	r2, [r7, #24]
 8000e94:	4013      	ands	r3, r2
 8000e96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	091b      	lsrs	r3, r3, #4
 8000e9e:	f003 0201 	and.w	r2, r3, #1
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea8:	69ba      	ldr	r2, [r7, #24]
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	69ba      	ldr	r2, [r7, #24]
 8000eb2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	f003 0303 	and.w	r3, r3, #3
 8000ebc:	2b03      	cmp	r3, #3
 8000ebe:	d017      	beq.n	8000ef0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	005b      	lsls	r3, r3, #1
 8000eca:	2203      	movs	r2, #3
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	43db      	mvns	r3, r3
 8000ed2:	69ba      	ldr	r2, [r7, #24]
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	689a      	ldr	r2, [r3, #8]
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee4:	69ba      	ldr	r2, [r7, #24]
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	f003 0303 	and.w	r3, r3, #3
 8000ef8:	2b02      	cmp	r3, #2
 8000efa:	d123      	bne.n	8000f44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000efc:	69fb      	ldr	r3, [r7, #28]
 8000efe:	08da      	lsrs	r2, r3, #3
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	3208      	adds	r2, #8
 8000f04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	f003 0307 	and.w	r3, r3, #7
 8000f10:	009b      	lsls	r3, r3, #2
 8000f12:	220f      	movs	r2, #15
 8000f14:	fa02 f303 	lsl.w	r3, r2, r3
 8000f18:	43db      	mvns	r3, r3
 8000f1a:	69ba      	ldr	r2, [r7, #24]
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	691a      	ldr	r2, [r3, #16]
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	f003 0307 	and.w	r3, r3, #7
 8000f2a:	009b      	lsls	r3, r3, #2
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	69ba      	ldr	r2, [r7, #24]
 8000f32:	4313      	orrs	r3, r2
 8000f34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	08da      	lsrs	r2, r3, #3
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	3208      	adds	r2, #8
 8000f3e:	69b9      	ldr	r1, [r7, #24]
 8000f40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	2203      	movs	r2, #3
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	43db      	mvns	r3, r3
 8000f56:	69ba      	ldr	r2, [r7, #24]
 8000f58:	4013      	ands	r3, r2
 8000f5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	f003 0203 	and.w	r2, r3, #3
 8000f64:	69fb      	ldr	r3, [r7, #28]
 8000f66:	005b      	lsls	r3, r3, #1
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	69ba      	ldr	r2, [r7, #24]
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	f000 80c0 	beq.w	8001106 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f86:	2300      	movs	r3, #0
 8000f88:	60fb      	str	r3, [r7, #12]
 8000f8a:	4b66      	ldr	r3, [pc, #408]	; (8001124 <HAL_GPIO_Init+0x324>)
 8000f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f8e:	4a65      	ldr	r2, [pc, #404]	; (8001124 <HAL_GPIO_Init+0x324>)
 8000f90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f94:	6453      	str	r3, [r2, #68]	; 0x44
 8000f96:	4b63      	ldr	r3, [pc, #396]	; (8001124 <HAL_GPIO_Init+0x324>)
 8000f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f9e:	60fb      	str	r3, [r7, #12]
 8000fa0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fa2:	4a61      	ldr	r2, [pc, #388]	; (8001128 <HAL_GPIO_Init+0x328>)
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	089b      	lsrs	r3, r3, #2
 8000fa8:	3302      	adds	r3, #2
 8000faa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	f003 0303 	and.w	r3, r3, #3
 8000fb6:	009b      	lsls	r3, r3, #2
 8000fb8:	220f      	movs	r2, #15
 8000fba:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbe:	43db      	mvns	r3, r3
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4a58      	ldr	r2, [pc, #352]	; (800112c <HAL_GPIO_Init+0x32c>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d037      	beq.n	800103e <HAL_GPIO_Init+0x23e>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4a57      	ldr	r2, [pc, #348]	; (8001130 <HAL_GPIO_Init+0x330>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d031      	beq.n	800103a <HAL_GPIO_Init+0x23a>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4a56      	ldr	r2, [pc, #344]	; (8001134 <HAL_GPIO_Init+0x334>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d02b      	beq.n	8001036 <HAL_GPIO_Init+0x236>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4a55      	ldr	r2, [pc, #340]	; (8001138 <HAL_GPIO_Init+0x338>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d025      	beq.n	8001032 <HAL_GPIO_Init+0x232>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4a54      	ldr	r2, [pc, #336]	; (800113c <HAL_GPIO_Init+0x33c>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d01f      	beq.n	800102e <HAL_GPIO_Init+0x22e>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4a53      	ldr	r2, [pc, #332]	; (8001140 <HAL_GPIO_Init+0x340>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d019      	beq.n	800102a <HAL_GPIO_Init+0x22a>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4a52      	ldr	r2, [pc, #328]	; (8001144 <HAL_GPIO_Init+0x344>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d013      	beq.n	8001026 <HAL_GPIO_Init+0x226>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4a51      	ldr	r2, [pc, #324]	; (8001148 <HAL_GPIO_Init+0x348>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d00d      	beq.n	8001022 <HAL_GPIO_Init+0x222>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4a50      	ldr	r2, [pc, #320]	; (800114c <HAL_GPIO_Init+0x34c>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d007      	beq.n	800101e <HAL_GPIO_Init+0x21e>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a4f      	ldr	r2, [pc, #316]	; (8001150 <HAL_GPIO_Init+0x350>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d101      	bne.n	800101a <HAL_GPIO_Init+0x21a>
 8001016:	2309      	movs	r3, #9
 8001018:	e012      	b.n	8001040 <HAL_GPIO_Init+0x240>
 800101a:	230a      	movs	r3, #10
 800101c:	e010      	b.n	8001040 <HAL_GPIO_Init+0x240>
 800101e:	2308      	movs	r3, #8
 8001020:	e00e      	b.n	8001040 <HAL_GPIO_Init+0x240>
 8001022:	2307      	movs	r3, #7
 8001024:	e00c      	b.n	8001040 <HAL_GPIO_Init+0x240>
 8001026:	2306      	movs	r3, #6
 8001028:	e00a      	b.n	8001040 <HAL_GPIO_Init+0x240>
 800102a:	2305      	movs	r3, #5
 800102c:	e008      	b.n	8001040 <HAL_GPIO_Init+0x240>
 800102e:	2304      	movs	r3, #4
 8001030:	e006      	b.n	8001040 <HAL_GPIO_Init+0x240>
 8001032:	2303      	movs	r3, #3
 8001034:	e004      	b.n	8001040 <HAL_GPIO_Init+0x240>
 8001036:	2302      	movs	r3, #2
 8001038:	e002      	b.n	8001040 <HAL_GPIO_Init+0x240>
 800103a:	2301      	movs	r3, #1
 800103c:	e000      	b.n	8001040 <HAL_GPIO_Init+0x240>
 800103e:	2300      	movs	r3, #0
 8001040:	69fa      	ldr	r2, [r7, #28]
 8001042:	f002 0203 	and.w	r2, r2, #3
 8001046:	0092      	lsls	r2, r2, #2
 8001048:	4093      	lsls	r3, r2
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	4313      	orrs	r3, r2
 800104e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001050:	4935      	ldr	r1, [pc, #212]	; (8001128 <HAL_GPIO_Init+0x328>)
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	089b      	lsrs	r3, r3, #2
 8001056:	3302      	adds	r3, #2
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800105e:	4b3d      	ldr	r3, [pc, #244]	; (8001154 <HAL_GPIO_Init+0x354>)
 8001060:	689b      	ldr	r3, [r3, #8]
 8001062:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	43db      	mvns	r3, r3
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	4013      	ands	r3, r2
 800106c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001076:	2b00      	cmp	r3, #0
 8001078:	d003      	beq.n	8001082 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800107a:	69ba      	ldr	r2, [r7, #24]
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	4313      	orrs	r3, r2
 8001080:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001082:	4a34      	ldr	r2, [pc, #208]	; (8001154 <HAL_GPIO_Init+0x354>)
 8001084:	69bb      	ldr	r3, [r7, #24]
 8001086:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001088:	4b32      	ldr	r3, [pc, #200]	; (8001154 <HAL_GPIO_Init+0x354>)
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	43db      	mvns	r3, r3
 8001092:	69ba      	ldr	r2, [r7, #24]
 8001094:	4013      	ands	r3, r2
 8001096:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d003      	beq.n	80010ac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	4313      	orrs	r3, r2
 80010aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010ac:	4a29      	ldr	r2, [pc, #164]	; (8001154 <HAL_GPIO_Init+0x354>)
 80010ae:	69bb      	ldr	r3, [r7, #24]
 80010b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010b2:	4b28      	ldr	r3, [pc, #160]	; (8001154 <HAL_GPIO_Init+0x354>)
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	43db      	mvns	r3, r3
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	4013      	ands	r3, r2
 80010c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d003      	beq.n	80010d6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80010ce:	69ba      	ldr	r2, [r7, #24]
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	4313      	orrs	r3, r2
 80010d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010d6:	4a1f      	ldr	r2, [pc, #124]	; (8001154 <HAL_GPIO_Init+0x354>)
 80010d8:	69bb      	ldr	r3, [r7, #24]
 80010da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010dc:	4b1d      	ldr	r3, [pc, #116]	; (8001154 <HAL_GPIO_Init+0x354>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	43db      	mvns	r3, r3
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	4013      	ands	r3, r2
 80010ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d003      	beq.n	8001100 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001100:	4a14      	ldr	r2, [pc, #80]	; (8001154 <HAL_GPIO_Init+0x354>)
 8001102:	69bb      	ldr	r3, [r7, #24]
 8001104:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	3301      	adds	r3, #1
 800110a:	61fb      	str	r3, [r7, #28]
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	2b0f      	cmp	r3, #15
 8001110:	f67f ae84 	bls.w	8000e1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001114:	bf00      	nop
 8001116:	bf00      	nop
 8001118:	3724      	adds	r7, #36	; 0x24
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	40023800 	.word	0x40023800
 8001128:	40013800 	.word	0x40013800
 800112c:	40020000 	.word	0x40020000
 8001130:	40020400 	.word	0x40020400
 8001134:	40020800 	.word	0x40020800
 8001138:	40020c00 	.word	0x40020c00
 800113c:	40021000 	.word	0x40021000
 8001140:	40021400 	.word	0x40021400
 8001144:	40021800 	.word	0x40021800
 8001148:	40021c00 	.word	0x40021c00
 800114c:	40022000 	.word	0x40022000
 8001150:	40022400 	.word	0x40022400
 8001154:	40013c00 	.word	0x40013c00

08001158 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001158:	b480      	push	{r7}
 800115a:	b085      	sub	sp, #20
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	460b      	mov	r3, r1
 8001162:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	691a      	ldr	r2, [r3, #16]
 8001168:	887b      	ldrh	r3, [r7, #2]
 800116a:	4013      	ands	r3, r2
 800116c:	2b00      	cmp	r3, #0
 800116e:	d002      	beq.n	8001176 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001170:	2301      	movs	r3, #1
 8001172:	73fb      	strb	r3, [r7, #15]
 8001174:	e001      	b.n	800117a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001176:	2300      	movs	r3, #0
 8001178:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800117a:	7bfb      	ldrb	r3, [r7, #15]
}
 800117c:	4618      	mov	r0, r3
 800117e:	3714      	adds	r7, #20
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr

08001188 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	460b      	mov	r3, r1
 8001192:	807b      	strh	r3, [r7, #2]
 8001194:	4613      	mov	r3, r2
 8001196:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001198:	787b      	ldrb	r3, [r7, #1]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d003      	beq.n	80011a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800119e:	887a      	ldrh	r2, [r7, #2]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011a4:	e003      	b.n	80011ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011a6:	887b      	ldrh	r3, [r7, #2]
 80011a8:	041a      	lsls	r2, r3, #16
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	619a      	str	r2, [r3, #24]
}
 80011ae:	bf00      	nop
 80011b0:	370c      	adds	r7, #12
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
	...

080011bc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80011c2:	2300      	movs	r3, #0
 80011c4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	603b      	str	r3, [r7, #0]
 80011ca:	4b20      	ldr	r3, [pc, #128]	; (800124c <HAL_PWREx_EnableOverDrive+0x90>)
 80011cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ce:	4a1f      	ldr	r2, [pc, #124]	; (800124c <HAL_PWREx_EnableOverDrive+0x90>)
 80011d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011d4:	6413      	str	r3, [r2, #64]	; 0x40
 80011d6:	4b1d      	ldr	r3, [pc, #116]	; (800124c <HAL_PWREx_EnableOverDrive+0x90>)
 80011d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011de:	603b      	str	r3, [r7, #0]
 80011e0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80011e2:	4b1b      	ldr	r3, [pc, #108]	; (8001250 <HAL_PWREx_EnableOverDrive+0x94>)
 80011e4:	2201      	movs	r2, #1
 80011e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011e8:	f7ff fcf4 	bl	8000bd4 <HAL_GetTick>
 80011ec:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80011ee:	e009      	b.n	8001204 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80011f0:	f7ff fcf0 	bl	8000bd4 <HAL_GetTick>
 80011f4:	4602      	mov	r2, r0
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80011fe:	d901      	bls.n	8001204 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001200:	2303      	movs	r3, #3
 8001202:	e01f      	b.n	8001244 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001204:	4b13      	ldr	r3, [pc, #76]	; (8001254 <HAL_PWREx_EnableOverDrive+0x98>)
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800120c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001210:	d1ee      	bne.n	80011f0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001212:	4b11      	ldr	r3, [pc, #68]	; (8001258 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001214:	2201      	movs	r2, #1
 8001216:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001218:	f7ff fcdc 	bl	8000bd4 <HAL_GetTick>
 800121c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800121e:	e009      	b.n	8001234 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001220:	f7ff fcd8 	bl	8000bd4 <HAL_GetTick>
 8001224:	4602      	mov	r2, r0
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	1ad3      	subs	r3, r2, r3
 800122a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800122e:	d901      	bls.n	8001234 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001230:	2303      	movs	r3, #3
 8001232:	e007      	b.n	8001244 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001234:	4b07      	ldr	r3, [pc, #28]	; (8001254 <HAL_PWREx_EnableOverDrive+0x98>)
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800123c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001240:	d1ee      	bne.n	8001220 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001242:	2300      	movs	r3, #0
}
 8001244:	4618      	mov	r0, r3
 8001246:	3708      	adds	r7, #8
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	40023800 	.word	0x40023800
 8001250:	420e0040 	.word	0x420e0040
 8001254:	40007000 	.word	0x40007000
 8001258:	420e0044 	.word	0x420e0044

0800125c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b086      	sub	sp, #24
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d101      	bne.n	800126e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800126a:	2301      	movs	r3, #1
 800126c:	e267      	b.n	800173e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f003 0301 	and.w	r3, r3, #1
 8001276:	2b00      	cmp	r3, #0
 8001278:	d075      	beq.n	8001366 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800127a:	4b88      	ldr	r3, [pc, #544]	; (800149c <HAL_RCC_OscConfig+0x240>)
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	f003 030c 	and.w	r3, r3, #12
 8001282:	2b04      	cmp	r3, #4
 8001284:	d00c      	beq.n	80012a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001286:	4b85      	ldr	r3, [pc, #532]	; (800149c <HAL_RCC_OscConfig+0x240>)
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800128e:	2b08      	cmp	r3, #8
 8001290:	d112      	bne.n	80012b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001292:	4b82      	ldr	r3, [pc, #520]	; (800149c <HAL_RCC_OscConfig+0x240>)
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800129a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800129e:	d10b      	bne.n	80012b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012a0:	4b7e      	ldr	r3, [pc, #504]	; (800149c <HAL_RCC_OscConfig+0x240>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d05b      	beq.n	8001364 <HAL_RCC_OscConfig+0x108>
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d157      	bne.n	8001364 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012b4:	2301      	movs	r3, #1
 80012b6:	e242      	b.n	800173e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012c0:	d106      	bne.n	80012d0 <HAL_RCC_OscConfig+0x74>
 80012c2:	4b76      	ldr	r3, [pc, #472]	; (800149c <HAL_RCC_OscConfig+0x240>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a75      	ldr	r2, [pc, #468]	; (800149c <HAL_RCC_OscConfig+0x240>)
 80012c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012cc:	6013      	str	r3, [r2, #0]
 80012ce:	e01d      	b.n	800130c <HAL_RCC_OscConfig+0xb0>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012d8:	d10c      	bne.n	80012f4 <HAL_RCC_OscConfig+0x98>
 80012da:	4b70      	ldr	r3, [pc, #448]	; (800149c <HAL_RCC_OscConfig+0x240>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a6f      	ldr	r2, [pc, #444]	; (800149c <HAL_RCC_OscConfig+0x240>)
 80012e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012e4:	6013      	str	r3, [r2, #0]
 80012e6:	4b6d      	ldr	r3, [pc, #436]	; (800149c <HAL_RCC_OscConfig+0x240>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a6c      	ldr	r2, [pc, #432]	; (800149c <HAL_RCC_OscConfig+0x240>)
 80012ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012f0:	6013      	str	r3, [r2, #0]
 80012f2:	e00b      	b.n	800130c <HAL_RCC_OscConfig+0xb0>
 80012f4:	4b69      	ldr	r3, [pc, #420]	; (800149c <HAL_RCC_OscConfig+0x240>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a68      	ldr	r2, [pc, #416]	; (800149c <HAL_RCC_OscConfig+0x240>)
 80012fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012fe:	6013      	str	r3, [r2, #0]
 8001300:	4b66      	ldr	r3, [pc, #408]	; (800149c <HAL_RCC_OscConfig+0x240>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a65      	ldr	r2, [pc, #404]	; (800149c <HAL_RCC_OscConfig+0x240>)
 8001306:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800130a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d013      	beq.n	800133c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001314:	f7ff fc5e 	bl	8000bd4 <HAL_GetTick>
 8001318:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800131a:	e008      	b.n	800132e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800131c:	f7ff fc5a 	bl	8000bd4 <HAL_GetTick>
 8001320:	4602      	mov	r2, r0
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	2b64      	cmp	r3, #100	; 0x64
 8001328:	d901      	bls.n	800132e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800132a:	2303      	movs	r3, #3
 800132c:	e207      	b.n	800173e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800132e:	4b5b      	ldr	r3, [pc, #364]	; (800149c <HAL_RCC_OscConfig+0x240>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d0f0      	beq.n	800131c <HAL_RCC_OscConfig+0xc0>
 800133a:	e014      	b.n	8001366 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800133c:	f7ff fc4a 	bl	8000bd4 <HAL_GetTick>
 8001340:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001342:	e008      	b.n	8001356 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001344:	f7ff fc46 	bl	8000bd4 <HAL_GetTick>
 8001348:	4602      	mov	r2, r0
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	2b64      	cmp	r3, #100	; 0x64
 8001350:	d901      	bls.n	8001356 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001352:	2303      	movs	r3, #3
 8001354:	e1f3      	b.n	800173e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001356:	4b51      	ldr	r3, [pc, #324]	; (800149c <HAL_RCC_OscConfig+0x240>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800135e:	2b00      	cmp	r3, #0
 8001360:	d1f0      	bne.n	8001344 <HAL_RCC_OscConfig+0xe8>
 8001362:	e000      	b.n	8001366 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001364:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f003 0302 	and.w	r3, r3, #2
 800136e:	2b00      	cmp	r3, #0
 8001370:	d063      	beq.n	800143a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001372:	4b4a      	ldr	r3, [pc, #296]	; (800149c <HAL_RCC_OscConfig+0x240>)
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	f003 030c 	and.w	r3, r3, #12
 800137a:	2b00      	cmp	r3, #0
 800137c:	d00b      	beq.n	8001396 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800137e:	4b47      	ldr	r3, [pc, #284]	; (800149c <HAL_RCC_OscConfig+0x240>)
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001386:	2b08      	cmp	r3, #8
 8001388:	d11c      	bne.n	80013c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800138a:	4b44      	ldr	r3, [pc, #272]	; (800149c <HAL_RCC_OscConfig+0x240>)
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001392:	2b00      	cmp	r3, #0
 8001394:	d116      	bne.n	80013c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001396:	4b41      	ldr	r3, [pc, #260]	; (800149c <HAL_RCC_OscConfig+0x240>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f003 0302 	and.w	r3, r3, #2
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d005      	beq.n	80013ae <HAL_RCC_OscConfig+0x152>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	68db      	ldr	r3, [r3, #12]
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d001      	beq.n	80013ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
 80013ac:	e1c7      	b.n	800173e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013ae:	4b3b      	ldr	r3, [pc, #236]	; (800149c <HAL_RCC_OscConfig+0x240>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	691b      	ldr	r3, [r3, #16]
 80013ba:	00db      	lsls	r3, r3, #3
 80013bc:	4937      	ldr	r1, [pc, #220]	; (800149c <HAL_RCC_OscConfig+0x240>)
 80013be:	4313      	orrs	r3, r2
 80013c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013c2:	e03a      	b.n	800143a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d020      	beq.n	800140e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013cc:	4b34      	ldr	r3, [pc, #208]	; (80014a0 <HAL_RCC_OscConfig+0x244>)
 80013ce:	2201      	movs	r2, #1
 80013d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013d2:	f7ff fbff 	bl	8000bd4 <HAL_GetTick>
 80013d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013d8:	e008      	b.n	80013ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013da:	f7ff fbfb 	bl	8000bd4 <HAL_GetTick>
 80013de:	4602      	mov	r2, r0
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	1ad3      	subs	r3, r2, r3
 80013e4:	2b02      	cmp	r3, #2
 80013e6:	d901      	bls.n	80013ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013e8:	2303      	movs	r3, #3
 80013ea:	e1a8      	b.n	800173e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013ec:	4b2b      	ldr	r3, [pc, #172]	; (800149c <HAL_RCC_OscConfig+0x240>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f003 0302 	and.w	r3, r3, #2
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d0f0      	beq.n	80013da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013f8:	4b28      	ldr	r3, [pc, #160]	; (800149c <HAL_RCC_OscConfig+0x240>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	691b      	ldr	r3, [r3, #16]
 8001404:	00db      	lsls	r3, r3, #3
 8001406:	4925      	ldr	r1, [pc, #148]	; (800149c <HAL_RCC_OscConfig+0x240>)
 8001408:	4313      	orrs	r3, r2
 800140a:	600b      	str	r3, [r1, #0]
 800140c:	e015      	b.n	800143a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800140e:	4b24      	ldr	r3, [pc, #144]	; (80014a0 <HAL_RCC_OscConfig+0x244>)
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001414:	f7ff fbde 	bl	8000bd4 <HAL_GetTick>
 8001418:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800141a:	e008      	b.n	800142e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800141c:	f7ff fbda 	bl	8000bd4 <HAL_GetTick>
 8001420:	4602      	mov	r2, r0
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	2b02      	cmp	r3, #2
 8001428:	d901      	bls.n	800142e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800142a:	2303      	movs	r3, #3
 800142c:	e187      	b.n	800173e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800142e:	4b1b      	ldr	r3, [pc, #108]	; (800149c <HAL_RCC_OscConfig+0x240>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f003 0302 	and.w	r3, r3, #2
 8001436:	2b00      	cmp	r3, #0
 8001438:	d1f0      	bne.n	800141c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f003 0308 	and.w	r3, r3, #8
 8001442:	2b00      	cmp	r3, #0
 8001444:	d036      	beq.n	80014b4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	695b      	ldr	r3, [r3, #20]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d016      	beq.n	800147c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800144e:	4b15      	ldr	r3, [pc, #84]	; (80014a4 <HAL_RCC_OscConfig+0x248>)
 8001450:	2201      	movs	r2, #1
 8001452:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001454:	f7ff fbbe 	bl	8000bd4 <HAL_GetTick>
 8001458:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800145a:	e008      	b.n	800146e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800145c:	f7ff fbba 	bl	8000bd4 <HAL_GetTick>
 8001460:	4602      	mov	r2, r0
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	2b02      	cmp	r3, #2
 8001468:	d901      	bls.n	800146e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800146a:	2303      	movs	r3, #3
 800146c:	e167      	b.n	800173e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800146e:	4b0b      	ldr	r3, [pc, #44]	; (800149c <HAL_RCC_OscConfig+0x240>)
 8001470:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001472:	f003 0302 	and.w	r3, r3, #2
 8001476:	2b00      	cmp	r3, #0
 8001478:	d0f0      	beq.n	800145c <HAL_RCC_OscConfig+0x200>
 800147a:	e01b      	b.n	80014b4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800147c:	4b09      	ldr	r3, [pc, #36]	; (80014a4 <HAL_RCC_OscConfig+0x248>)
 800147e:	2200      	movs	r2, #0
 8001480:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001482:	f7ff fba7 	bl	8000bd4 <HAL_GetTick>
 8001486:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001488:	e00e      	b.n	80014a8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800148a:	f7ff fba3 	bl	8000bd4 <HAL_GetTick>
 800148e:	4602      	mov	r2, r0
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	1ad3      	subs	r3, r2, r3
 8001494:	2b02      	cmp	r3, #2
 8001496:	d907      	bls.n	80014a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001498:	2303      	movs	r3, #3
 800149a:	e150      	b.n	800173e <HAL_RCC_OscConfig+0x4e2>
 800149c:	40023800 	.word	0x40023800
 80014a0:	42470000 	.word	0x42470000
 80014a4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014a8:	4b88      	ldr	r3, [pc, #544]	; (80016cc <HAL_RCC_OscConfig+0x470>)
 80014aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014ac:	f003 0302 	and.w	r3, r3, #2
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d1ea      	bne.n	800148a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f003 0304 	and.w	r3, r3, #4
 80014bc:	2b00      	cmp	r3, #0
 80014be:	f000 8097 	beq.w	80015f0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014c2:	2300      	movs	r3, #0
 80014c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014c6:	4b81      	ldr	r3, [pc, #516]	; (80016cc <HAL_RCC_OscConfig+0x470>)
 80014c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d10f      	bne.n	80014f2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014d2:	2300      	movs	r3, #0
 80014d4:	60bb      	str	r3, [r7, #8]
 80014d6:	4b7d      	ldr	r3, [pc, #500]	; (80016cc <HAL_RCC_OscConfig+0x470>)
 80014d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014da:	4a7c      	ldr	r2, [pc, #496]	; (80016cc <HAL_RCC_OscConfig+0x470>)
 80014dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014e0:	6413      	str	r3, [r2, #64]	; 0x40
 80014e2:	4b7a      	ldr	r3, [pc, #488]	; (80016cc <HAL_RCC_OscConfig+0x470>)
 80014e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ea:	60bb      	str	r3, [r7, #8]
 80014ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014ee:	2301      	movs	r3, #1
 80014f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014f2:	4b77      	ldr	r3, [pc, #476]	; (80016d0 <HAL_RCC_OscConfig+0x474>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d118      	bne.n	8001530 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014fe:	4b74      	ldr	r3, [pc, #464]	; (80016d0 <HAL_RCC_OscConfig+0x474>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a73      	ldr	r2, [pc, #460]	; (80016d0 <HAL_RCC_OscConfig+0x474>)
 8001504:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001508:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800150a:	f7ff fb63 	bl	8000bd4 <HAL_GetTick>
 800150e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001510:	e008      	b.n	8001524 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001512:	f7ff fb5f 	bl	8000bd4 <HAL_GetTick>
 8001516:	4602      	mov	r2, r0
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	1ad3      	subs	r3, r2, r3
 800151c:	2b02      	cmp	r3, #2
 800151e:	d901      	bls.n	8001524 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001520:	2303      	movs	r3, #3
 8001522:	e10c      	b.n	800173e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001524:	4b6a      	ldr	r3, [pc, #424]	; (80016d0 <HAL_RCC_OscConfig+0x474>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800152c:	2b00      	cmp	r3, #0
 800152e:	d0f0      	beq.n	8001512 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	2b01      	cmp	r3, #1
 8001536:	d106      	bne.n	8001546 <HAL_RCC_OscConfig+0x2ea>
 8001538:	4b64      	ldr	r3, [pc, #400]	; (80016cc <HAL_RCC_OscConfig+0x470>)
 800153a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800153c:	4a63      	ldr	r2, [pc, #396]	; (80016cc <HAL_RCC_OscConfig+0x470>)
 800153e:	f043 0301 	orr.w	r3, r3, #1
 8001542:	6713      	str	r3, [r2, #112]	; 0x70
 8001544:	e01c      	b.n	8001580 <HAL_RCC_OscConfig+0x324>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	2b05      	cmp	r3, #5
 800154c:	d10c      	bne.n	8001568 <HAL_RCC_OscConfig+0x30c>
 800154e:	4b5f      	ldr	r3, [pc, #380]	; (80016cc <HAL_RCC_OscConfig+0x470>)
 8001550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001552:	4a5e      	ldr	r2, [pc, #376]	; (80016cc <HAL_RCC_OscConfig+0x470>)
 8001554:	f043 0304 	orr.w	r3, r3, #4
 8001558:	6713      	str	r3, [r2, #112]	; 0x70
 800155a:	4b5c      	ldr	r3, [pc, #368]	; (80016cc <HAL_RCC_OscConfig+0x470>)
 800155c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800155e:	4a5b      	ldr	r2, [pc, #364]	; (80016cc <HAL_RCC_OscConfig+0x470>)
 8001560:	f043 0301 	orr.w	r3, r3, #1
 8001564:	6713      	str	r3, [r2, #112]	; 0x70
 8001566:	e00b      	b.n	8001580 <HAL_RCC_OscConfig+0x324>
 8001568:	4b58      	ldr	r3, [pc, #352]	; (80016cc <HAL_RCC_OscConfig+0x470>)
 800156a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800156c:	4a57      	ldr	r2, [pc, #348]	; (80016cc <HAL_RCC_OscConfig+0x470>)
 800156e:	f023 0301 	bic.w	r3, r3, #1
 8001572:	6713      	str	r3, [r2, #112]	; 0x70
 8001574:	4b55      	ldr	r3, [pc, #340]	; (80016cc <HAL_RCC_OscConfig+0x470>)
 8001576:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001578:	4a54      	ldr	r2, [pc, #336]	; (80016cc <HAL_RCC_OscConfig+0x470>)
 800157a:	f023 0304 	bic.w	r3, r3, #4
 800157e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d015      	beq.n	80015b4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001588:	f7ff fb24 	bl	8000bd4 <HAL_GetTick>
 800158c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800158e:	e00a      	b.n	80015a6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001590:	f7ff fb20 	bl	8000bd4 <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	f241 3288 	movw	r2, #5000	; 0x1388
 800159e:	4293      	cmp	r3, r2
 80015a0:	d901      	bls.n	80015a6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80015a2:	2303      	movs	r3, #3
 80015a4:	e0cb      	b.n	800173e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015a6:	4b49      	ldr	r3, [pc, #292]	; (80016cc <HAL_RCC_OscConfig+0x470>)
 80015a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015aa:	f003 0302 	and.w	r3, r3, #2
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d0ee      	beq.n	8001590 <HAL_RCC_OscConfig+0x334>
 80015b2:	e014      	b.n	80015de <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015b4:	f7ff fb0e 	bl	8000bd4 <HAL_GetTick>
 80015b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015ba:	e00a      	b.n	80015d2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015bc:	f7ff fb0a 	bl	8000bd4 <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d901      	bls.n	80015d2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80015ce:	2303      	movs	r3, #3
 80015d0:	e0b5      	b.n	800173e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015d2:	4b3e      	ldr	r3, [pc, #248]	; (80016cc <HAL_RCC_OscConfig+0x470>)
 80015d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015d6:	f003 0302 	and.w	r3, r3, #2
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d1ee      	bne.n	80015bc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015de:	7dfb      	ldrb	r3, [r7, #23]
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d105      	bne.n	80015f0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015e4:	4b39      	ldr	r3, [pc, #228]	; (80016cc <HAL_RCC_OscConfig+0x470>)
 80015e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e8:	4a38      	ldr	r2, [pc, #224]	; (80016cc <HAL_RCC_OscConfig+0x470>)
 80015ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015ee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	699b      	ldr	r3, [r3, #24]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	f000 80a1 	beq.w	800173c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015fa:	4b34      	ldr	r3, [pc, #208]	; (80016cc <HAL_RCC_OscConfig+0x470>)
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	f003 030c 	and.w	r3, r3, #12
 8001602:	2b08      	cmp	r3, #8
 8001604:	d05c      	beq.n	80016c0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	699b      	ldr	r3, [r3, #24]
 800160a:	2b02      	cmp	r3, #2
 800160c:	d141      	bne.n	8001692 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800160e:	4b31      	ldr	r3, [pc, #196]	; (80016d4 <HAL_RCC_OscConfig+0x478>)
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001614:	f7ff fade 	bl	8000bd4 <HAL_GetTick>
 8001618:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800161a:	e008      	b.n	800162e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800161c:	f7ff fada 	bl	8000bd4 <HAL_GetTick>
 8001620:	4602      	mov	r2, r0
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	2b02      	cmp	r3, #2
 8001628:	d901      	bls.n	800162e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800162a:	2303      	movs	r3, #3
 800162c:	e087      	b.n	800173e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800162e:	4b27      	ldr	r3, [pc, #156]	; (80016cc <HAL_RCC_OscConfig+0x470>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001636:	2b00      	cmp	r3, #0
 8001638:	d1f0      	bne.n	800161c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	69da      	ldr	r2, [r3, #28]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6a1b      	ldr	r3, [r3, #32]
 8001642:	431a      	orrs	r2, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001648:	019b      	lsls	r3, r3, #6
 800164a:	431a      	orrs	r2, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001650:	085b      	lsrs	r3, r3, #1
 8001652:	3b01      	subs	r3, #1
 8001654:	041b      	lsls	r3, r3, #16
 8001656:	431a      	orrs	r2, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800165c:	061b      	lsls	r3, r3, #24
 800165e:	491b      	ldr	r1, [pc, #108]	; (80016cc <HAL_RCC_OscConfig+0x470>)
 8001660:	4313      	orrs	r3, r2
 8001662:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001664:	4b1b      	ldr	r3, [pc, #108]	; (80016d4 <HAL_RCC_OscConfig+0x478>)
 8001666:	2201      	movs	r2, #1
 8001668:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800166a:	f7ff fab3 	bl	8000bd4 <HAL_GetTick>
 800166e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001670:	e008      	b.n	8001684 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001672:	f7ff faaf 	bl	8000bd4 <HAL_GetTick>
 8001676:	4602      	mov	r2, r0
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	1ad3      	subs	r3, r2, r3
 800167c:	2b02      	cmp	r3, #2
 800167e:	d901      	bls.n	8001684 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001680:	2303      	movs	r3, #3
 8001682:	e05c      	b.n	800173e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001684:	4b11      	ldr	r3, [pc, #68]	; (80016cc <HAL_RCC_OscConfig+0x470>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800168c:	2b00      	cmp	r3, #0
 800168e:	d0f0      	beq.n	8001672 <HAL_RCC_OscConfig+0x416>
 8001690:	e054      	b.n	800173c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001692:	4b10      	ldr	r3, [pc, #64]	; (80016d4 <HAL_RCC_OscConfig+0x478>)
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001698:	f7ff fa9c 	bl	8000bd4 <HAL_GetTick>
 800169c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800169e:	e008      	b.n	80016b2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016a0:	f7ff fa98 	bl	8000bd4 <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	2b02      	cmp	r3, #2
 80016ac:	d901      	bls.n	80016b2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80016ae:	2303      	movs	r3, #3
 80016b0:	e045      	b.n	800173e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016b2:	4b06      	ldr	r3, [pc, #24]	; (80016cc <HAL_RCC_OscConfig+0x470>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d1f0      	bne.n	80016a0 <HAL_RCC_OscConfig+0x444>
 80016be:	e03d      	b.n	800173c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	699b      	ldr	r3, [r3, #24]
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d107      	bne.n	80016d8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80016c8:	2301      	movs	r3, #1
 80016ca:	e038      	b.n	800173e <HAL_RCC_OscConfig+0x4e2>
 80016cc:	40023800 	.word	0x40023800
 80016d0:	40007000 	.word	0x40007000
 80016d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016d8:	4b1b      	ldr	r3, [pc, #108]	; (8001748 <HAL_RCC_OscConfig+0x4ec>)
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	699b      	ldr	r3, [r3, #24]
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d028      	beq.n	8001738 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d121      	bne.n	8001738 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016fe:	429a      	cmp	r2, r3
 8001700:	d11a      	bne.n	8001738 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001702:	68fa      	ldr	r2, [r7, #12]
 8001704:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001708:	4013      	ands	r3, r2
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800170e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001710:	4293      	cmp	r3, r2
 8001712:	d111      	bne.n	8001738 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800171e:	085b      	lsrs	r3, r3, #1
 8001720:	3b01      	subs	r3, #1
 8001722:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001724:	429a      	cmp	r2, r3
 8001726:	d107      	bne.n	8001738 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001732:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001734:	429a      	cmp	r2, r3
 8001736:	d001      	beq.n	800173c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	e000      	b.n	800173e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800173c:	2300      	movs	r3, #0
}
 800173e:	4618      	mov	r0, r3
 8001740:	3718      	adds	r7, #24
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	40023800 	.word	0x40023800

0800174c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d101      	bne.n	8001760 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e0cc      	b.n	80018fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001760:	4b68      	ldr	r3, [pc, #416]	; (8001904 <HAL_RCC_ClockConfig+0x1b8>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 030f 	and.w	r3, r3, #15
 8001768:	683a      	ldr	r2, [r7, #0]
 800176a:	429a      	cmp	r2, r3
 800176c:	d90c      	bls.n	8001788 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800176e:	4b65      	ldr	r3, [pc, #404]	; (8001904 <HAL_RCC_ClockConfig+0x1b8>)
 8001770:	683a      	ldr	r2, [r7, #0]
 8001772:	b2d2      	uxtb	r2, r2
 8001774:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001776:	4b63      	ldr	r3, [pc, #396]	; (8001904 <HAL_RCC_ClockConfig+0x1b8>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 030f 	and.w	r3, r3, #15
 800177e:	683a      	ldr	r2, [r7, #0]
 8001780:	429a      	cmp	r2, r3
 8001782:	d001      	beq.n	8001788 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e0b8      	b.n	80018fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 0302 	and.w	r3, r3, #2
 8001790:	2b00      	cmp	r3, #0
 8001792:	d020      	beq.n	80017d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f003 0304 	and.w	r3, r3, #4
 800179c:	2b00      	cmp	r3, #0
 800179e:	d005      	beq.n	80017ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017a0:	4b59      	ldr	r3, [pc, #356]	; (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	4a58      	ldr	r2, [pc, #352]	; (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 80017a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 0308 	and.w	r3, r3, #8
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d005      	beq.n	80017c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017b8:	4b53      	ldr	r3, [pc, #332]	; (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	4a52      	ldr	r2, [pc, #328]	; (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 80017be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017c4:	4b50      	ldr	r3, [pc, #320]	; (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	494d      	ldr	r1, [pc, #308]	; (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 80017d2:	4313      	orrs	r3, r2
 80017d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 0301 	and.w	r3, r3, #1
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d044      	beq.n	800186c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d107      	bne.n	80017fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ea:	4b47      	ldr	r3, [pc, #284]	; (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d119      	bne.n	800182a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e07f      	b.n	80018fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d003      	beq.n	800180a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001806:	2b03      	cmp	r3, #3
 8001808:	d107      	bne.n	800181a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800180a:	4b3f      	ldr	r3, [pc, #252]	; (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d109      	bne.n	800182a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e06f      	b.n	80018fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800181a:	4b3b      	ldr	r3, [pc, #236]	; (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0302 	and.w	r3, r3, #2
 8001822:	2b00      	cmp	r3, #0
 8001824:	d101      	bne.n	800182a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e067      	b.n	80018fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800182a:	4b37      	ldr	r3, [pc, #220]	; (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	f023 0203 	bic.w	r2, r3, #3
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	4934      	ldr	r1, [pc, #208]	; (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 8001838:	4313      	orrs	r3, r2
 800183a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800183c:	f7ff f9ca 	bl	8000bd4 <HAL_GetTick>
 8001840:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001842:	e00a      	b.n	800185a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001844:	f7ff f9c6 	bl	8000bd4 <HAL_GetTick>
 8001848:	4602      	mov	r2, r0
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001852:	4293      	cmp	r3, r2
 8001854:	d901      	bls.n	800185a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001856:	2303      	movs	r3, #3
 8001858:	e04f      	b.n	80018fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800185a:	4b2b      	ldr	r3, [pc, #172]	; (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	f003 020c 	and.w	r2, r3, #12
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	429a      	cmp	r2, r3
 800186a:	d1eb      	bne.n	8001844 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800186c:	4b25      	ldr	r3, [pc, #148]	; (8001904 <HAL_RCC_ClockConfig+0x1b8>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 030f 	and.w	r3, r3, #15
 8001874:	683a      	ldr	r2, [r7, #0]
 8001876:	429a      	cmp	r2, r3
 8001878:	d20c      	bcs.n	8001894 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800187a:	4b22      	ldr	r3, [pc, #136]	; (8001904 <HAL_RCC_ClockConfig+0x1b8>)
 800187c:	683a      	ldr	r2, [r7, #0]
 800187e:	b2d2      	uxtb	r2, r2
 8001880:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001882:	4b20      	ldr	r3, [pc, #128]	; (8001904 <HAL_RCC_ClockConfig+0x1b8>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 030f 	and.w	r3, r3, #15
 800188a:	683a      	ldr	r2, [r7, #0]
 800188c:	429a      	cmp	r2, r3
 800188e:	d001      	beq.n	8001894 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	e032      	b.n	80018fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 0304 	and.w	r3, r3, #4
 800189c:	2b00      	cmp	r3, #0
 800189e:	d008      	beq.n	80018b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018a0:	4b19      	ldr	r3, [pc, #100]	; (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	4916      	ldr	r1, [pc, #88]	; (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 80018ae:	4313      	orrs	r3, r2
 80018b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0308 	and.w	r3, r3, #8
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d009      	beq.n	80018d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018be:	4b12      	ldr	r3, [pc, #72]	; (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	691b      	ldr	r3, [r3, #16]
 80018ca:	00db      	lsls	r3, r3, #3
 80018cc:	490e      	ldr	r1, [pc, #56]	; (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 80018ce:	4313      	orrs	r3, r2
 80018d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018d2:	f000 f821 	bl	8001918 <HAL_RCC_GetSysClockFreq>
 80018d6:	4602      	mov	r2, r0
 80018d8:	4b0b      	ldr	r3, [pc, #44]	; (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	091b      	lsrs	r3, r3, #4
 80018de:	f003 030f 	and.w	r3, r3, #15
 80018e2:	490a      	ldr	r1, [pc, #40]	; (800190c <HAL_RCC_ClockConfig+0x1c0>)
 80018e4:	5ccb      	ldrb	r3, [r1, r3]
 80018e6:	fa22 f303 	lsr.w	r3, r2, r3
 80018ea:	4a09      	ldr	r2, [pc, #36]	; (8001910 <HAL_RCC_ClockConfig+0x1c4>)
 80018ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018ee:	4b09      	ldr	r3, [pc, #36]	; (8001914 <HAL_RCC_ClockConfig+0x1c8>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7ff f92a 	bl	8000b4c <HAL_InitTick>

  return HAL_OK;
 80018f8:	2300      	movs	r3, #0
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3710      	adds	r7, #16
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	40023c00 	.word	0x40023c00
 8001908:	40023800 	.word	0x40023800
 800190c:	08002a84 	.word	0x08002a84
 8001910:	20000000 	.word	0x20000000
 8001914:	20000004 	.word	0x20000004

08001918 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001918:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800191c:	b090      	sub	sp, #64	; 0x40
 800191e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001920:	2300      	movs	r3, #0
 8001922:	637b      	str	r3, [r7, #52]	; 0x34
 8001924:	2300      	movs	r3, #0
 8001926:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001928:	2300      	movs	r3, #0
 800192a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800192c:	2300      	movs	r3, #0
 800192e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001930:	4b59      	ldr	r3, [pc, #356]	; (8001a98 <HAL_RCC_GetSysClockFreq+0x180>)
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	f003 030c 	and.w	r3, r3, #12
 8001938:	2b08      	cmp	r3, #8
 800193a:	d00d      	beq.n	8001958 <HAL_RCC_GetSysClockFreq+0x40>
 800193c:	2b08      	cmp	r3, #8
 800193e:	f200 80a1 	bhi.w	8001a84 <HAL_RCC_GetSysClockFreq+0x16c>
 8001942:	2b00      	cmp	r3, #0
 8001944:	d002      	beq.n	800194c <HAL_RCC_GetSysClockFreq+0x34>
 8001946:	2b04      	cmp	r3, #4
 8001948:	d003      	beq.n	8001952 <HAL_RCC_GetSysClockFreq+0x3a>
 800194a:	e09b      	b.n	8001a84 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800194c:	4b53      	ldr	r3, [pc, #332]	; (8001a9c <HAL_RCC_GetSysClockFreq+0x184>)
 800194e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001950:	e09b      	b.n	8001a8a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001952:	4b53      	ldr	r3, [pc, #332]	; (8001aa0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001954:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001956:	e098      	b.n	8001a8a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001958:	4b4f      	ldr	r3, [pc, #316]	; (8001a98 <HAL_RCC_GetSysClockFreq+0x180>)
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001960:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001962:	4b4d      	ldr	r3, [pc, #308]	; (8001a98 <HAL_RCC_GetSysClockFreq+0x180>)
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d028      	beq.n	80019c0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800196e:	4b4a      	ldr	r3, [pc, #296]	; (8001a98 <HAL_RCC_GetSysClockFreq+0x180>)
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	099b      	lsrs	r3, r3, #6
 8001974:	2200      	movs	r2, #0
 8001976:	623b      	str	r3, [r7, #32]
 8001978:	627a      	str	r2, [r7, #36]	; 0x24
 800197a:	6a3b      	ldr	r3, [r7, #32]
 800197c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001980:	2100      	movs	r1, #0
 8001982:	4b47      	ldr	r3, [pc, #284]	; (8001aa0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001984:	fb03 f201 	mul.w	r2, r3, r1
 8001988:	2300      	movs	r3, #0
 800198a:	fb00 f303 	mul.w	r3, r0, r3
 800198e:	4413      	add	r3, r2
 8001990:	4a43      	ldr	r2, [pc, #268]	; (8001aa0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001992:	fba0 1202 	umull	r1, r2, r0, r2
 8001996:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001998:	460a      	mov	r2, r1
 800199a:	62ba      	str	r2, [r7, #40]	; 0x28
 800199c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800199e:	4413      	add	r3, r2
 80019a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019a4:	2200      	movs	r2, #0
 80019a6:	61bb      	str	r3, [r7, #24]
 80019a8:	61fa      	str	r2, [r7, #28]
 80019aa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80019ae:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80019b2:	f7fe fc23 	bl	80001fc <__aeabi_uldivmod>
 80019b6:	4602      	mov	r2, r0
 80019b8:	460b      	mov	r3, r1
 80019ba:	4613      	mov	r3, r2
 80019bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80019be:	e053      	b.n	8001a68 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019c0:	4b35      	ldr	r3, [pc, #212]	; (8001a98 <HAL_RCC_GetSysClockFreq+0x180>)
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	099b      	lsrs	r3, r3, #6
 80019c6:	2200      	movs	r2, #0
 80019c8:	613b      	str	r3, [r7, #16]
 80019ca:	617a      	str	r2, [r7, #20]
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80019d2:	f04f 0b00 	mov.w	fp, #0
 80019d6:	4652      	mov	r2, sl
 80019d8:	465b      	mov	r3, fp
 80019da:	f04f 0000 	mov.w	r0, #0
 80019de:	f04f 0100 	mov.w	r1, #0
 80019e2:	0159      	lsls	r1, r3, #5
 80019e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019e8:	0150      	lsls	r0, r2, #5
 80019ea:	4602      	mov	r2, r0
 80019ec:	460b      	mov	r3, r1
 80019ee:	ebb2 080a 	subs.w	r8, r2, sl
 80019f2:	eb63 090b 	sbc.w	r9, r3, fp
 80019f6:	f04f 0200 	mov.w	r2, #0
 80019fa:	f04f 0300 	mov.w	r3, #0
 80019fe:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001a02:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001a06:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001a0a:	ebb2 0408 	subs.w	r4, r2, r8
 8001a0e:	eb63 0509 	sbc.w	r5, r3, r9
 8001a12:	f04f 0200 	mov.w	r2, #0
 8001a16:	f04f 0300 	mov.w	r3, #0
 8001a1a:	00eb      	lsls	r3, r5, #3
 8001a1c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a20:	00e2      	lsls	r2, r4, #3
 8001a22:	4614      	mov	r4, r2
 8001a24:	461d      	mov	r5, r3
 8001a26:	eb14 030a 	adds.w	r3, r4, sl
 8001a2a:	603b      	str	r3, [r7, #0]
 8001a2c:	eb45 030b 	adc.w	r3, r5, fp
 8001a30:	607b      	str	r3, [r7, #4]
 8001a32:	f04f 0200 	mov.w	r2, #0
 8001a36:	f04f 0300 	mov.w	r3, #0
 8001a3a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a3e:	4629      	mov	r1, r5
 8001a40:	028b      	lsls	r3, r1, #10
 8001a42:	4621      	mov	r1, r4
 8001a44:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a48:	4621      	mov	r1, r4
 8001a4a:	028a      	lsls	r2, r1, #10
 8001a4c:	4610      	mov	r0, r2
 8001a4e:	4619      	mov	r1, r3
 8001a50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a52:	2200      	movs	r2, #0
 8001a54:	60bb      	str	r3, [r7, #8]
 8001a56:	60fa      	str	r2, [r7, #12]
 8001a58:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001a5c:	f7fe fbce 	bl	80001fc <__aeabi_uldivmod>
 8001a60:	4602      	mov	r2, r0
 8001a62:	460b      	mov	r3, r1
 8001a64:	4613      	mov	r3, r2
 8001a66:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a68:	4b0b      	ldr	r3, [pc, #44]	; (8001a98 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	0c1b      	lsrs	r3, r3, #16
 8001a6e:	f003 0303 	and.w	r3, r3, #3
 8001a72:	3301      	adds	r3, #1
 8001a74:	005b      	lsls	r3, r3, #1
 8001a76:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001a78:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a80:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001a82:	e002      	b.n	8001a8a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a84:	4b05      	ldr	r3, [pc, #20]	; (8001a9c <HAL_RCC_GetSysClockFreq+0x184>)
 8001a86:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001a88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3740      	adds	r7, #64	; 0x40
 8001a90:	46bd      	mov	sp, r7
 8001a92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a96:	bf00      	nop
 8001a98:	40023800 	.word	0x40023800
 8001a9c:	00f42400 	.word	0x00f42400
 8001aa0:	017d7840 	.word	0x017d7840

08001aa4 <findslot>:
 8001aa4:	4b0a      	ldr	r3, [pc, #40]	; (8001ad0 <findslot+0x2c>)
 8001aa6:	b510      	push	{r4, lr}
 8001aa8:	4604      	mov	r4, r0
 8001aaa:	6818      	ldr	r0, [r3, #0]
 8001aac:	b118      	cbz	r0, 8001ab6 <findslot+0x12>
 8001aae:	6983      	ldr	r3, [r0, #24]
 8001ab0:	b90b      	cbnz	r3, 8001ab6 <findslot+0x12>
 8001ab2:	f000 faf7 	bl	80020a4 <__sinit>
 8001ab6:	2c13      	cmp	r4, #19
 8001ab8:	d807      	bhi.n	8001aca <findslot+0x26>
 8001aba:	4806      	ldr	r0, [pc, #24]	; (8001ad4 <findslot+0x30>)
 8001abc:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8001ac0:	3201      	adds	r2, #1
 8001ac2:	d002      	beq.n	8001aca <findslot+0x26>
 8001ac4:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8001ac8:	bd10      	pop	{r4, pc}
 8001aca:	2000      	movs	r0, #0
 8001acc:	e7fc      	b.n	8001ac8 <findslot+0x24>
 8001ace:	bf00      	nop
 8001ad0:	20000014 	.word	0x20000014
 8001ad4:	200000a8 	.word	0x200000a8

08001ad8 <error>:
 8001ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ada:	4604      	mov	r4, r0
 8001adc:	f000 fa84 	bl	8001fe8 <__errno>
 8001ae0:	2613      	movs	r6, #19
 8001ae2:	4605      	mov	r5, r0
 8001ae4:	2700      	movs	r7, #0
 8001ae6:	4630      	mov	r0, r6
 8001ae8:	4639      	mov	r1, r7
 8001aea:	beab      	bkpt	0x00ab
 8001aec:	4606      	mov	r6, r0
 8001aee:	602e      	str	r6, [r5, #0]
 8001af0:	4620      	mov	r0, r4
 8001af2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001af4 <checkerror>:
 8001af4:	1c43      	adds	r3, r0, #1
 8001af6:	d101      	bne.n	8001afc <checkerror+0x8>
 8001af8:	f7ff bfee 	b.w	8001ad8 <error>
 8001afc:	4770      	bx	lr

08001afe <_swiread>:
 8001afe:	b530      	push	{r4, r5, lr}
 8001b00:	b085      	sub	sp, #20
 8001b02:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8001b06:	9203      	str	r2, [sp, #12]
 8001b08:	2406      	movs	r4, #6
 8001b0a:	ad01      	add	r5, sp, #4
 8001b0c:	4620      	mov	r0, r4
 8001b0e:	4629      	mov	r1, r5
 8001b10:	beab      	bkpt	0x00ab
 8001b12:	4604      	mov	r4, r0
 8001b14:	4620      	mov	r0, r4
 8001b16:	f7ff ffed 	bl	8001af4 <checkerror>
 8001b1a:	b005      	add	sp, #20
 8001b1c:	bd30      	pop	{r4, r5, pc}

08001b1e <_read>:
 8001b1e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001b20:	4615      	mov	r5, r2
 8001b22:	9101      	str	r1, [sp, #4]
 8001b24:	f7ff ffbe 	bl	8001aa4 <findslot>
 8001b28:	9901      	ldr	r1, [sp, #4]
 8001b2a:	4604      	mov	r4, r0
 8001b2c:	b938      	cbnz	r0, 8001b3e <_read+0x20>
 8001b2e:	f000 fa5b 	bl	8001fe8 <__errno>
 8001b32:	2309      	movs	r3, #9
 8001b34:	6003      	str	r3, [r0, #0]
 8001b36:	f04f 30ff 	mov.w	r0, #4294967295
 8001b3a:	b003      	add	sp, #12
 8001b3c:	bd30      	pop	{r4, r5, pc}
 8001b3e:	6800      	ldr	r0, [r0, #0]
 8001b40:	462a      	mov	r2, r5
 8001b42:	f7ff ffdc 	bl	8001afe <_swiread>
 8001b46:	1c43      	adds	r3, r0, #1
 8001b48:	d0f7      	beq.n	8001b3a <_read+0x1c>
 8001b4a:	6863      	ldr	r3, [r4, #4]
 8001b4c:	1a2a      	subs	r2, r5, r0
 8001b4e:	4413      	add	r3, r2
 8001b50:	6063      	str	r3, [r4, #4]
 8001b52:	4610      	mov	r0, r2
 8001b54:	e7f1      	b.n	8001b3a <_read+0x1c>

08001b56 <_swilseek>:
 8001b56:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001b58:	460c      	mov	r4, r1
 8001b5a:	4616      	mov	r6, r2
 8001b5c:	f7ff ffa2 	bl	8001aa4 <findslot>
 8001b60:	4605      	mov	r5, r0
 8001b62:	b940      	cbnz	r0, 8001b76 <_swilseek+0x20>
 8001b64:	f000 fa40 	bl	8001fe8 <__errno>
 8001b68:	2309      	movs	r3, #9
 8001b6a:	6003      	str	r3, [r0, #0]
 8001b6c:	f04f 34ff 	mov.w	r4, #4294967295
 8001b70:	4620      	mov	r0, r4
 8001b72:	b003      	add	sp, #12
 8001b74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b76:	2e02      	cmp	r6, #2
 8001b78:	d903      	bls.n	8001b82 <_swilseek+0x2c>
 8001b7a:	f000 fa35 	bl	8001fe8 <__errno>
 8001b7e:	2316      	movs	r3, #22
 8001b80:	e7f3      	b.n	8001b6a <_swilseek+0x14>
 8001b82:	2e01      	cmp	r6, #1
 8001b84:	d112      	bne.n	8001bac <_swilseek+0x56>
 8001b86:	6843      	ldr	r3, [r0, #4]
 8001b88:	18e4      	adds	r4, r4, r3
 8001b8a:	d4f6      	bmi.n	8001b7a <_swilseek+0x24>
 8001b8c:	682b      	ldr	r3, [r5, #0]
 8001b8e:	260a      	movs	r6, #10
 8001b90:	e9cd 3400 	strd	r3, r4, [sp]
 8001b94:	466f      	mov	r7, sp
 8001b96:	4630      	mov	r0, r6
 8001b98:	4639      	mov	r1, r7
 8001b9a:	beab      	bkpt	0x00ab
 8001b9c:	4606      	mov	r6, r0
 8001b9e:	4630      	mov	r0, r6
 8001ba0:	f7ff ffa8 	bl	8001af4 <checkerror>
 8001ba4:	2800      	cmp	r0, #0
 8001ba6:	dbe1      	blt.n	8001b6c <_swilseek+0x16>
 8001ba8:	606c      	str	r4, [r5, #4]
 8001baa:	e7e1      	b.n	8001b70 <_swilseek+0x1a>
 8001bac:	2e02      	cmp	r6, #2
 8001bae:	d1ed      	bne.n	8001b8c <_swilseek+0x36>
 8001bb0:	6803      	ldr	r3, [r0, #0]
 8001bb2:	9300      	str	r3, [sp, #0]
 8001bb4:	260c      	movs	r6, #12
 8001bb6:	466f      	mov	r7, sp
 8001bb8:	4630      	mov	r0, r6
 8001bba:	4639      	mov	r1, r7
 8001bbc:	beab      	bkpt	0x00ab
 8001bbe:	4606      	mov	r6, r0
 8001bc0:	4630      	mov	r0, r6
 8001bc2:	f7ff ff97 	bl	8001af4 <checkerror>
 8001bc6:	1c43      	adds	r3, r0, #1
 8001bc8:	d0d0      	beq.n	8001b6c <_swilseek+0x16>
 8001bca:	4404      	add	r4, r0
 8001bcc:	e7de      	b.n	8001b8c <_swilseek+0x36>

08001bce <_lseek>:
 8001bce:	f7ff bfc2 	b.w	8001b56 <_swilseek>

08001bd2 <_swiwrite>:
 8001bd2:	b530      	push	{r4, r5, lr}
 8001bd4:	b085      	sub	sp, #20
 8001bd6:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8001bda:	9203      	str	r2, [sp, #12]
 8001bdc:	2405      	movs	r4, #5
 8001bde:	ad01      	add	r5, sp, #4
 8001be0:	4620      	mov	r0, r4
 8001be2:	4629      	mov	r1, r5
 8001be4:	beab      	bkpt	0x00ab
 8001be6:	4604      	mov	r4, r0
 8001be8:	4620      	mov	r0, r4
 8001bea:	f7ff ff83 	bl	8001af4 <checkerror>
 8001bee:	b005      	add	sp, #20
 8001bf0:	bd30      	pop	{r4, r5, pc}

08001bf2 <_write>:
 8001bf2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001bf4:	4615      	mov	r5, r2
 8001bf6:	9101      	str	r1, [sp, #4]
 8001bf8:	f7ff ff54 	bl	8001aa4 <findslot>
 8001bfc:	9901      	ldr	r1, [sp, #4]
 8001bfe:	4604      	mov	r4, r0
 8001c00:	b930      	cbnz	r0, 8001c10 <_write+0x1e>
 8001c02:	f000 f9f1 	bl	8001fe8 <__errno>
 8001c06:	2309      	movs	r3, #9
 8001c08:	6003      	str	r3, [r0, #0]
 8001c0a:	f04f 30ff 	mov.w	r0, #4294967295
 8001c0e:	e012      	b.n	8001c36 <_write+0x44>
 8001c10:	6800      	ldr	r0, [r0, #0]
 8001c12:	462a      	mov	r2, r5
 8001c14:	f7ff ffdd 	bl	8001bd2 <_swiwrite>
 8001c18:	2800      	cmp	r0, #0
 8001c1a:	dbf6      	blt.n	8001c0a <_write+0x18>
 8001c1c:	6862      	ldr	r2, [r4, #4]
 8001c1e:	1a2b      	subs	r3, r5, r0
 8001c20:	441a      	add	r2, r3
 8001c22:	42a8      	cmp	r0, r5
 8001c24:	6062      	str	r2, [r4, #4]
 8001c26:	d105      	bne.n	8001c34 <_write+0x42>
 8001c28:	2000      	movs	r0, #0
 8001c2a:	b003      	add	sp, #12
 8001c2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001c30:	f7ff bf52 	b.w	8001ad8 <error>
 8001c34:	4618      	mov	r0, r3
 8001c36:	b003      	add	sp, #12
 8001c38:	bd30      	pop	{r4, r5, pc}

08001c3a <_swiclose>:
 8001c3a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001c3c:	2402      	movs	r4, #2
 8001c3e:	9001      	str	r0, [sp, #4]
 8001c40:	ad01      	add	r5, sp, #4
 8001c42:	4620      	mov	r0, r4
 8001c44:	4629      	mov	r1, r5
 8001c46:	beab      	bkpt	0x00ab
 8001c48:	4604      	mov	r4, r0
 8001c4a:	4620      	mov	r0, r4
 8001c4c:	f7ff ff52 	bl	8001af4 <checkerror>
 8001c50:	b003      	add	sp, #12
 8001c52:	bd30      	pop	{r4, r5, pc}

08001c54 <_close>:
 8001c54:	b538      	push	{r3, r4, r5, lr}
 8001c56:	4605      	mov	r5, r0
 8001c58:	f7ff ff24 	bl	8001aa4 <findslot>
 8001c5c:	4604      	mov	r4, r0
 8001c5e:	b930      	cbnz	r0, 8001c6e <_close+0x1a>
 8001c60:	f000 f9c2 	bl	8001fe8 <__errno>
 8001c64:	2309      	movs	r3, #9
 8001c66:	6003      	str	r3, [r0, #0]
 8001c68:	f04f 30ff 	mov.w	r0, #4294967295
 8001c6c:	bd38      	pop	{r3, r4, r5, pc}
 8001c6e:	3d01      	subs	r5, #1
 8001c70:	2d01      	cmp	r5, #1
 8001c72:	d809      	bhi.n	8001c88 <_close+0x34>
 8001c74:	4b09      	ldr	r3, [pc, #36]	; (8001c9c <_close+0x48>)
 8001c76:	689a      	ldr	r2, [r3, #8]
 8001c78:	691b      	ldr	r3, [r3, #16]
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	d104      	bne.n	8001c88 <_close+0x34>
 8001c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c82:	6003      	str	r3, [r0, #0]
 8001c84:	2000      	movs	r0, #0
 8001c86:	e7f1      	b.n	8001c6c <_close+0x18>
 8001c88:	6820      	ldr	r0, [r4, #0]
 8001c8a:	f7ff ffd6 	bl	8001c3a <_swiclose>
 8001c8e:	2800      	cmp	r0, #0
 8001c90:	d1ec      	bne.n	8001c6c <_close+0x18>
 8001c92:	f04f 33ff 	mov.w	r3, #4294967295
 8001c96:	6023      	str	r3, [r4, #0]
 8001c98:	e7e8      	b.n	8001c6c <_close+0x18>
 8001c9a:	bf00      	nop
 8001c9c:	200000a8 	.word	0x200000a8

08001ca0 <_swistat>:
 8001ca0:	b570      	push	{r4, r5, r6, lr}
 8001ca2:	460c      	mov	r4, r1
 8001ca4:	f7ff fefe 	bl	8001aa4 <findslot>
 8001ca8:	4605      	mov	r5, r0
 8001caa:	b930      	cbnz	r0, 8001cba <_swistat+0x1a>
 8001cac:	f000 f99c 	bl	8001fe8 <__errno>
 8001cb0:	2309      	movs	r3, #9
 8001cb2:	6003      	str	r3, [r0, #0]
 8001cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8001cb8:	bd70      	pop	{r4, r5, r6, pc}
 8001cba:	6863      	ldr	r3, [r4, #4]
 8001cbc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001cc0:	6063      	str	r3, [r4, #4]
 8001cc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cc6:	64a3      	str	r3, [r4, #72]	; 0x48
 8001cc8:	260c      	movs	r6, #12
 8001cca:	4630      	mov	r0, r6
 8001ccc:	4629      	mov	r1, r5
 8001cce:	beab      	bkpt	0x00ab
 8001cd0:	4605      	mov	r5, r0
 8001cd2:	4628      	mov	r0, r5
 8001cd4:	f7ff ff0e 	bl	8001af4 <checkerror>
 8001cd8:	1c43      	adds	r3, r0, #1
 8001cda:	bf1c      	itt	ne
 8001cdc:	6120      	strne	r0, [r4, #16]
 8001cde:	2000      	movne	r0, #0
 8001ce0:	e7ea      	b.n	8001cb8 <_swistat+0x18>

08001ce2 <_fstat>:
 8001ce2:	460b      	mov	r3, r1
 8001ce4:	b510      	push	{r4, lr}
 8001ce6:	2100      	movs	r1, #0
 8001ce8:	4604      	mov	r4, r0
 8001cea:	2258      	movs	r2, #88	; 0x58
 8001cec:	4618      	mov	r0, r3
 8001cee:	f000 fa9e 	bl	800222e <memset>
 8001cf2:	4601      	mov	r1, r0
 8001cf4:	4620      	mov	r0, r4
 8001cf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001cfa:	f7ff bfd1 	b.w	8001ca0 <_swistat>

08001cfe <_stat>:
 8001cfe:	b538      	push	{r3, r4, r5, lr}
 8001d00:	460d      	mov	r5, r1
 8001d02:	4604      	mov	r4, r0
 8001d04:	2258      	movs	r2, #88	; 0x58
 8001d06:	2100      	movs	r1, #0
 8001d08:	4628      	mov	r0, r5
 8001d0a:	f000 fa90 	bl	800222e <memset>
 8001d0e:	4620      	mov	r0, r4
 8001d10:	2100      	movs	r1, #0
 8001d12:	f000 f811 	bl	8001d38 <_swiopen>
 8001d16:	1c43      	adds	r3, r0, #1
 8001d18:	4604      	mov	r4, r0
 8001d1a:	d00b      	beq.n	8001d34 <_stat+0x36>
 8001d1c:	686b      	ldr	r3, [r5, #4]
 8001d1e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8001d22:	606b      	str	r3, [r5, #4]
 8001d24:	4629      	mov	r1, r5
 8001d26:	f7ff ffbb 	bl	8001ca0 <_swistat>
 8001d2a:	4605      	mov	r5, r0
 8001d2c:	4620      	mov	r0, r4
 8001d2e:	f7ff ff91 	bl	8001c54 <_close>
 8001d32:	462c      	mov	r4, r5
 8001d34:	4620      	mov	r0, r4
 8001d36:	bd38      	pop	{r3, r4, r5, pc}

08001d38 <_swiopen>:
 8001d38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001d3c:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8001de8 <_swiopen+0xb0>
 8001d40:	b097      	sub	sp, #92	; 0x5c
 8001d42:	4607      	mov	r7, r0
 8001d44:	460e      	mov	r6, r1
 8001d46:	2500      	movs	r5, #0
 8001d48:	f858 4035 	ldr.w	r4, [r8, r5, lsl #3]
 8001d4c:	1c61      	adds	r1, r4, #1
 8001d4e:	d037      	beq.n	8001dc0 <_swiopen+0x88>
 8001d50:	3501      	adds	r5, #1
 8001d52:	2d14      	cmp	r5, #20
 8001d54:	d1f8      	bne.n	8001d48 <_swiopen+0x10>
 8001d56:	f000 f947 	bl	8001fe8 <__errno>
 8001d5a:	2318      	movs	r3, #24
 8001d5c:	6003      	str	r3, [r0, #0]
 8001d5e:	f04f 34ff 	mov.w	r4, #4294967295
 8001d62:	e03d      	b.n	8001de0 <_swiopen+0xa8>
 8001d64:	f3c6 4400 	ubfx	r4, r6, #16, #1
 8001d68:	f240 6301 	movw	r3, #1537	; 0x601
 8001d6c:	07b2      	lsls	r2, r6, #30
 8001d6e:	bf48      	it	mi
 8001d70:	f044 0402 	orrmi.w	r4, r4, #2
 8001d74:	421e      	tst	r6, r3
 8001d76:	bf18      	it	ne
 8001d78:	f044 0404 	orrne.w	r4, r4, #4
 8001d7c:	0733      	lsls	r3, r6, #28
 8001d7e:	bf48      	it	mi
 8001d80:	f024 0404 	bicmi.w	r4, r4, #4
 8001d84:	4638      	mov	r0, r7
 8001d86:	bf48      	it	mi
 8001d88:	f044 0408 	orrmi.w	r4, r4, #8
 8001d8c:	9700      	str	r7, [sp, #0]
 8001d8e:	f7fe fa2d 	bl	80001ec <strlen>
 8001d92:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8001d96:	2401      	movs	r4, #1
 8001d98:	4620      	mov	r0, r4
 8001d9a:	4649      	mov	r1, r9
 8001d9c:	beab      	bkpt	0x00ab
 8001d9e:	4604      	mov	r4, r0
 8001da0:	2c00      	cmp	r4, #0
 8001da2:	db08      	blt.n	8001db6 <_swiopen+0x7e>
 8001da4:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 8001da8:	eb08 08c5 	add.w	r8, r8, r5, lsl #3
 8001dac:	2300      	movs	r3, #0
 8001dae:	f8c8 3004 	str.w	r3, [r8, #4]
 8001db2:	462c      	mov	r4, r5
 8001db4:	e014      	b.n	8001de0 <_swiopen+0xa8>
 8001db6:	4620      	mov	r0, r4
 8001db8:	f7ff fe8e 	bl	8001ad8 <error>
 8001dbc:	4604      	mov	r4, r0
 8001dbe:	e00f      	b.n	8001de0 <_swiopen+0xa8>
 8001dc0:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 8001dc4:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8001dc8:	46e9      	mov	r9, sp
 8001dca:	d1cb      	bne.n	8001d64 <_swiopen+0x2c>
 8001dcc:	4649      	mov	r1, r9
 8001dce:	4638      	mov	r0, r7
 8001dd0:	f7ff ff95 	bl	8001cfe <_stat>
 8001dd4:	3001      	adds	r0, #1
 8001dd6:	d0c5      	beq.n	8001d64 <_swiopen+0x2c>
 8001dd8:	f000 f906 	bl	8001fe8 <__errno>
 8001ddc:	2311      	movs	r3, #17
 8001dde:	6003      	str	r3, [r0, #0]
 8001de0:	4620      	mov	r0, r4
 8001de2:	b017      	add	sp, #92	; 0x5c
 8001de4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001de8:	200000a8 	.word	0x200000a8

08001dec <_get_semihosting_exts>:
 8001dec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001df0:	4606      	mov	r6, r0
 8001df2:	460f      	mov	r7, r1
 8001df4:	482a      	ldr	r0, [pc, #168]	; (8001ea0 <_get_semihosting_exts+0xb4>)
 8001df6:	2100      	movs	r1, #0
 8001df8:	4615      	mov	r5, r2
 8001dfa:	f7ff ff9d 	bl	8001d38 <_swiopen>
 8001dfe:	462a      	mov	r2, r5
 8001e00:	4604      	mov	r4, r0
 8001e02:	2100      	movs	r1, #0
 8001e04:	4630      	mov	r0, r6
 8001e06:	f000 fa12 	bl	800222e <memset>
 8001e0a:	1c63      	adds	r3, r4, #1
 8001e0c:	d016      	beq.n	8001e3c <_get_semihosting_exts+0x50>
 8001e0e:	4620      	mov	r0, r4
 8001e10:	f7ff fe48 	bl	8001aa4 <findslot>
 8001e14:	f04f 090c 	mov.w	r9, #12
 8001e18:	4680      	mov	r8, r0
 8001e1a:	4648      	mov	r0, r9
 8001e1c:	4641      	mov	r1, r8
 8001e1e:	beab      	bkpt	0x00ab
 8001e20:	4680      	mov	r8, r0
 8001e22:	4640      	mov	r0, r8
 8001e24:	f7ff fe66 	bl	8001af4 <checkerror>
 8001e28:	2803      	cmp	r0, #3
 8001e2a:	dd02      	ble.n	8001e32 <_get_semihosting_exts+0x46>
 8001e2c:	1ec3      	subs	r3, r0, #3
 8001e2e:	42ab      	cmp	r3, r5
 8001e30:	dc08      	bgt.n	8001e44 <_get_semihosting_exts+0x58>
 8001e32:	4620      	mov	r0, r4
 8001e34:	f7ff ff0e 	bl	8001c54 <_close>
 8001e38:	f04f 34ff 	mov.w	r4, #4294967295
 8001e3c:	4620      	mov	r0, r4
 8001e3e:	b003      	add	sp, #12
 8001e40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001e44:	2204      	movs	r2, #4
 8001e46:	eb0d 0102 	add.w	r1, sp, r2
 8001e4a:	4620      	mov	r0, r4
 8001e4c:	f7ff fe67 	bl	8001b1e <_read>
 8001e50:	2803      	cmp	r0, #3
 8001e52:	ddee      	ble.n	8001e32 <_get_semihosting_exts+0x46>
 8001e54:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001e58:	2b53      	cmp	r3, #83	; 0x53
 8001e5a:	d1ea      	bne.n	8001e32 <_get_semihosting_exts+0x46>
 8001e5c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8001e60:	2b48      	cmp	r3, #72	; 0x48
 8001e62:	d1e6      	bne.n	8001e32 <_get_semihosting_exts+0x46>
 8001e64:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8001e68:	2b46      	cmp	r3, #70	; 0x46
 8001e6a:	d1e2      	bne.n	8001e32 <_get_semihosting_exts+0x46>
 8001e6c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001e70:	2b42      	cmp	r3, #66	; 0x42
 8001e72:	d1de      	bne.n	8001e32 <_get_semihosting_exts+0x46>
 8001e74:	2201      	movs	r2, #1
 8001e76:	4639      	mov	r1, r7
 8001e78:	4620      	mov	r0, r4
 8001e7a:	f7ff fe6c 	bl	8001b56 <_swilseek>
 8001e7e:	2800      	cmp	r0, #0
 8001e80:	dbd7      	blt.n	8001e32 <_get_semihosting_exts+0x46>
 8001e82:	462a      	mov	r2, r5
 8001e84:	4631      	mov	r1, r6
 8001e86:	4620      	mov	r0, r4
 8001e88:	f7ff fe49 	bl	8001b1e <_read>
 8001e8c:	4605      	mov	r5, r0
 8001e8e:	4620      	mov	r0, r4
 8001e90:	f7ff fee0 	bl	8001c54 <_close>
 8001e94:	4628      	mov	r0, r5
 8001e96:	f7ff fe2d 	bl	8001af4 <checkerror>
 8001e9a:	4604      	mov	r4, r0
 8001e9c:	e7ce      	b.n	8001e3c <_get_semihosting_exts+0x50>
 8001e9e:	bf00      	nop
 8001ea0:	08002a94 	.word	0x08002a94

08001ea4 <initialise_semihosting_exts>:
 8001ea4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001ea6:	4d0a      	ldr	r5, [pc, #40]	; (8001ed0 <initialise_semihosting_exts+0x2c>)
 8001ea8:	4c0a      	ldr	r4, [pc, #40]	; (8001ed4 <initialise_semihosting_exts+0x30>)
 8001eaa:	2100      	movs	r1, #0
 8001eac:	2201      	movs	r2, #1
 8001eae:	a801      	add	r0, sp, #4
 8001eb0:	6029      	str	r1, [r5, #0]
 8001eb2:	6022      	str	r2, [r4, #0]
 8001eb4:	f7ff ff9a 	bl	8001dec <_get_semihosting_exts>
 8001eb8:	2800      	cmp	r0, #0
 8001eba:	dd07      	ble.n	8001ecc <initialise_semihosting_exts+0x28>
 8001ebc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001ec0:	f003 0201 	and.w	r2, r3, #1
 8001ec4:	f003 0302 	and.w	r3, r3, #2
 8001ec8:	602a      	str	r2, [r5, #0]
 8001eca:	6023      	str	r3, [r4, #0]
 8001ecc:	b003      	add	sp, #12
 8001ece:	bd30      	pop	{r4, r5, pc}
 8001ed0:	2000000c 	.word	0x2000000c
 8001ed4:	20000010 	.word	0x20000010

08001ed8 <_has_ext_stdout_stderr>:
 8001ed8:	b510      	push	{r4, lr}
 8001eda:	4c04      	ldr	r4, [pc, #16]	; (8001eec <_has_ext_stdout_stderr+0x14>)
 8001edc:	6823      	ldr	r3, [r4, #0]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	da01      	bge.n	8001ee6 <_has_ext_stdout_stderr+0xe>
 8001ee2:	f7ff ffdf 	bl	8001ea4 <initialise_semihosting_exts>
 8001ee6:	6820      	ldr	r0, [r4, #0]
 8001ee8:	bd10      	pop	{r4, pc}
 8001eea:	bf00      	nop
 8001eec:	20000010 	.word	0x20000010

08001ef0 <initialise_monitor_handles>:
 8001ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ef4:	b085      	sub	sp, #20
 8001ef6:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8001fa8 <initialise_monitor_handles+0xb8>
 8001efa:	f8cd 9004 	str.w	r9, [sp, #4]
 8001efe:	2303      	movs	r3, #3
 8001f00:	2400      	movs	r4, #0
 8001f02:	9303      	str	r3, [sp, #12]
 8001f04:	af01      	add	r7, sp, #4
 8001f06:	9402      	str	r4, [sp, #8]
 8001f08:	2501      	movs	r5, #1
 8001f0a:	4628      	mov	r0, r5
 8001f0c:	4639      	mov	r1, r7
 8001f0e:	beab      	bkpt	0x00ab
 8001f10:	4605      	mov	r5, r0
 8001f12:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8001fac <initialise_monitor_handles+0xbc>
 8001f16:	4623      	mov	r3, r4
 8001f18:	4c20      	ldr	r4, [pc, #128]	; (8001f9c <initialise_monitor_handles+0xac>)
 8001f1a:	f8c8 5000 	str.w	r5, [r8]
 8001f1e:	f04f 32ff 	mov.w	r2, #4294967295
 8001f22:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8001f26:	3301      	adds	r3, #1
 8001f28:	2b14      	cmp	r3, #20
 8001f2a:	d1fa      	bne.n	8001f22 <initialise_monitor_handles+0x32>
 8001f2c:	f7ff ffd4 	bl	8001ed8 <_has_ext_stdout_stderr>
 8001f30:	4d1b      	ldr	r5, [pc, #108]	; (8001fa0 <initialise_monitor_handles+0xb0>)
 8001f32:	b1d0      	cbz	r0, 8001f6a <initialise_monitor_handles+0x7a>
 8001f34:	f04f 0a03 	mov.w	sl, #3
 8001f38:	2304      	movs	r3, #4
 8001f3a:	f8cd 9004 	str.w	r9, [sp, #4]
 8001f3e:	2601      	movs	r6, #1
 8001f40:	f8cd a00c 	str.w	sl, [sp, #12]
 8001f44:	9302      	str	r3, [sp, #8]
 8001f46:	4630      	mov	r0, r6
 8001f48:	4639      	mov	r1, r7
 8001f4a:	beab      	bkpt	0x00ab
 8001f4c:	4683      	mov	fp, r0
 8001f4e:	4b15      	ldr	r3, [pc, #84]	; (8001fa4 <initialise_monitor_handles+0xb4>)
 8001f50:	f8cd 9004 	str.w	r9, [sp, #4]
 8001f54:	f8c3 b000 	str.w	fp, [r3]
 8001f58:	2308      	movs	r3, #8
 8001f5a:	f8cd a00c 	str.w	sl, [sp, #12]
 8001f5e:	9302      	str	r3, [sp, #8]
 8001f60:	4630      	mov	r0, r6
 8001f62:	4639      	mov	r1, r7
 8001f64:	beab      	bkpt	0x00ab
 8001f66:	4606      	mov	r6, r0
 8001f68:	602e      	str	r6, [r5, #0]
 8001f6a:	682b      	ldr	r3, [r5, #0]
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	bf02      	ittt	eq
 8001f70:	4b0c      	ldreq	r3, [pc, #48]	; (8001fa4 <initialise_monitor_handles+0xb4>)
 8001f72:	681b      	ldreq	r3, [r3, #0]
 8001f74:	602b      	streq	r3, [r5, #0]
 8001f76:	2600      	movs	r6, #0
 8001f78:	f8d8 3000 	ldr.w	r3, [r8]
 8001f7c:	6023      	str	r3, [r4, #0]
 8001f7e:	6066      	str	r6, [r4, #4]
 8001f80:	f7ff ffaa 	bl	8001ed8 <_has_ext_stdout_stderr>
 8001f84:	b130      	cbz	r0, 8001f94 <initialise_monitor_handles+0xa4>
 8001f86:	4b07      	ldr	r3, [pc, #28]	; (8001fa4 <initialise_monitor_handles+0xb4>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8001f8e:	682b      	ldr	r3, [r5, #0]
 8001f90:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8001f94:	b005      	add	sp, #20
 8001f96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f9a:	bf00      	nop
 8001f9c:	200000a8 	.word	0x200000a8
 8001fa0:	2000009c 	.word	0x2000009c
 8001fa4:	200000a4 	.word	0x200000a4
 8001fa8:	08002aaa 	.word	0x08002aaa
 8001fac:	200000a0 	.word	0x200000a0

08001fb0 <_isatty>:
 8001fb0:	b570      	push	{r4, r5, r6, lr}
 8001fb2:	f7ff fd77 	bl	8001aa4 <findslot>
 8001fb6:	2509      	movs	r5, #9
 8001fb8:	4604      	mov	r4, r0
 8001fba:	b920      	cbnz	r0, 8001fc6 <_isatty+0x16>
 8001fbc:	f000 f814 	bl	8001fe8 <__errno>
 8001fc0:	6005      	str	r5, [r0, #0]
 8001fc2:	4620      	mov	r0, r4
 8001fc4:	bd70      	pop	{r4, r5, r6, pc}
 8001fc6:	4628      	mov	r0, r5
 8001fc8:	4621      	mov	r1, r4
 8001fca:	beab      	bkpt	0x00ab
 8001fcc:	4604      	mov	r4, r0
 8001fce:	2c01      	cmp	r4, #1
 8001fd0:	d0f7      	beq.n	8001fc2 <_isatty+0x12>
 8001fd2:	f000 f809 	bl	8001fe8 <__errno>
 8001fd6:	2400      	movs	r4, #0
 8001fd8:	4605      	mov	r5, r0
 8001fda:	2613      	movs	r6, #19
 8001fdc:	4630      	mov	r0, r6
 8001fde:	4621      	mov	r1, r4
 8001fe0:	beab      	bkpt	0x00ab
 8001fe2:	4606      	mov	r6, r0
 8001fe4:	602e      	str	r6, [r5, #0]
 8001fe6:	e7ec      	b.n	8001fc2 <_isatty+0x12>

08001fe8 <__errno>:
 8001fe8:	4b01      	ldr	r3, [pc, #4]	; (8001ff0 <__errno+0x8>)
 8001fea:	6818      	ldr	r0, [r3, #0]
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	20000014 	.word	0x20000014

08001ff4 <std>:
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	b510      	push	{r4, lr}
 8001ff8:	4604      	mov	r4, r0
 8001ffa:	e9c0 3300 	strd	r3, r3, [r0]
 8001ffe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002002:	6083      	str	r3, [r0, #8]
 8002004:	8181      	strh	r1, [r0, #12]
 8002006:	6643      	str	r3, [r0, #100]	; 0x64
 8002008:	81c2      	strh	r2, [r0, #14]
 800200a:	6183      	str	r3, [r0, #24]
 800200c:	4619      	mov	r1, r3
 800200e:	2208      	movs	r2, #8
 8002010:	305c      	adds	r0, #92	; 0x5c
 8002012:	f000 f90c 	bl	800222e <memset>
 8002016:	4b05      	ldr	r3, [pc, #20]	; (800202c <std+0x38>)
 8002018:	6263      	str	r3, [r4, #36]	; 0x24
 800201a:	4b05      	ldr	r3, [pc, #20]	; (8002030 <std+0x3c>)
 800201c:	62a3      	str	r3, [r4, #40]	; 0x28
 800201e:	4b05      	ldr	r3, [pc, #20]	; (8002034 <std+0x40>)
 8002020:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002022:	4b05      	ldr	r3, [pc, #20]	; (8002038 <std+0x44>)
 8002024:	6224      	str	r4, [r4, #32]
 8002026:	6323      	str	r3, [r4, #48]	; 0x30
 8002028:	bd10      	pop	{r4, pc}
 800202a:	bf00      	nop
 800202c:	08002475 	.word	0x08002475
 8002030:	08002497 	.word	0x08002497
 8002034:	080024cf 	.word	0x080024cf
 8002038:	080024f3 	.word	0x080024f3

0800203c <_cleanup_r>:
 800203c:	4901      	ldr	r1, [pc, #4]	; (8002044 <_cleanup_r+0x8>)
 800203e:	f000 b8af 	b.w	80021a0 <_fwalk_reent>
 8002042:	bf00      	nop
 8002044:	080027cd 	.word	0x080027cd

08002048 <__sfmoreglue>:
 8002048:	b570      	push	{r4, r5, r6, lr}
 800204a:	2268      	movs	r2, #104	; 0x68
 800204c:	1e4d      	subs	r5, r1, #1
 800204e:	4355      	muls	r5, r2
 8002050:	460e      	mov	r6, r1
 8002052:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002056:	f000 f913 	bl	8002280 <_malloc_r>
 800205a:	4604      	mov	r4, r0
 800205c:	b140      	cbz	r0, 8002070 <__sfmoreglue+0x28>
 800205e:	2100      	movs	r1, #0
 8002060:	e9c0 1600 	strd	r1, r6, [r0]
 8002064:	300c      	adds	r0, #12
 8002066:	60a0      	str	r0, [r4, #8]
 8002068:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800206c:	f000 f8df 	bl	800222e <memset>
 8002070:	4620      	mov	r0, r4
 8002072:	bd70      	pop	{r4, r5, r6, pc}

08002074 <__sfp_lock_acquire>:
 8002074:	4801      	ldr	r0, [pc, #4]	; (800207c <__sfp_lock_acquire+0x8>)
 8002076:	f000 b8d8 	b.w	800222a <__retarget_lock_acquire_recursive>
 800207a:	bf00      	nop
 800207c:	20000149 	.word	0x20000149

08002080 <__sfp_lock_release>:
 8002080:	4801      	ldr	r0, [pc, #4]	; (8002088 <__sfp_lock_release+0x8>)
 8002082:	f000 b8d3 	b.w	800222c <__retarget_lock_release_recursive>
 8002086:	bf00      	nop
 8002088:	20000149 	.word	0x20000149

0800208c <__sinit_lock_acquire>:
 800208c:	4801      	ldr	r0, [pc, #4]	; (8002094 <__sinit_lock_acquire+0x8>)
 800208e:	f000 b8cc 	b.w	800222a <__retarget_lock_acquire_recursive>
 8002092:	bf00      	nop
 8002094:	2000014a 	.word	0x2000014a

08002098 <__sinit_lock_release>:
 8002098:	4801      	ldr	r0, [pc, #4]	; (80020a0 <__sinit_lock_release+0x8>)
 800209a:	f000 b8c7 	b.w	800222c <__retarget_lock_release_recursive>
 800209e:	bf00      	nop
 80020a0:	2000014a 	.word	0x2000014a

080020a4 <__sinit>:
 80020a4:	b510      	push	{r4, lr}
 80020a6:	4604      	mov	r4, r0
 80020a8:	f7ff fff0 	bl	800208c <__sinit_lock_acquire>
 80020ac:	69a3      	ldr	r3, [r4, #24]
 80020ae:	b11b      	cbz	r3, 80020b8 <__sinit+0x14>
 80020b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80020b4:	f7ff bff0 	b.w	8002098 <__sinit_lock_release>
 80020b8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80020bc:	6523      	str	r3, [r4, #80]	; 0x50
 80020be:	4b13      	ldr	r3, [pc, #76]	; (800210c <__sinit+0x68>)
 80020c0:	4a13      	ldr	r2, [pc, #76]	; (8002110 <__sinit+0x6c>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	62a2      	str	r2, [r4, #40]	; 0x28
 80020c6:	42a3      	cmp	r3, r4
 80020c8:	bf04      	itt	eq
 80020ca:	2301      	moveq	r3, #1
 80020cc:	61a3      	streq	r3, [r4, #24]
 80020ce:	4620      	mov	r0, r4
 80020d0:	f000 f820 	bl	8002114 <__sfp>
 80020d4:	6060      	str	r0, [r4, #4]
 80020d6:	4620      	mov	r0, r4
 80020d8:	f000 f81c 	bl	8002114 <__sfp>
 80020dc:	60a0      	str	r0, [r4, #8]
 80020de:	4620      	mov	r0, r4
 80020e0:	f000 f818 	bl	8002114 <__sfp>
 80020e4:	2200      	movs	r2, #0
 80020e6:	60e0      	str	r0, [r4, #12]
 80020e8:	2104      	movs	r1, #4
 80020ea:	6860      	ldr	r0, [r4, #4]
 80020ec:	f7ff ff82 	bl	8001ff4 <std>
 80020f0:	68a0      	ldr	r0, [r4, #8]
 80020f2:	2201      	movs	r2, #1
 80020f4:	2109      	movs	r1, #9
 80020f6:	f7ff ff7d 	bl	8001ff4 <std>
 80020fa:	68e0      	ldr	r0, [r4, #12]
 80020fc:	2202      	movs	r2, #2
 80020fe:	2112      	movs	r1, #18
 8002100:	f7ff ff78 	bl	8001ff4 <std>
 8002104:	2301      	movs	r3, #1
 8002106:	61a3      	str	r3, [r4, #24]
 8002108:	e7d2      	b.n	80020b0 <__sinit+0xc>
 800210a:	bf00      	nop
 800210c:	08002b10 	.word	0x08002b10
 8002110:	0800203d 	.word	0x0800203d

08002114 <__sfp>:
 8002114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002116:	4607      	mov	r7, r0
 8002118:	f7ff ffac 	bl	8002074 <__sfp_lock_acquire>
 800211c:	4b1e      	ldr	r3, [pc, #120]	; (8002198 <__sfp+0x84>)
 800211e:	681e      	ldr	r6, [r3, #0]
 8002120:	69b3      	ldr	r3, [r6, #24]
 8002122:	b913      	cbnz	r3, 800212a <__sfp+0x16>
 8002124:	4630      	mov	r0, r6
 8002126:	f7ff ffbd 	bl	80020a4 <__sinit>
 800212a:	3648      	adds	r6, #72	; 0x48
 800212c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002130:	3b01      	subs	r3, #1
 8002132:	d503      	bpl.n	800213c <__sfp+0x28>
 8002134:	6833      	ldr	r3, [r6, #0]
 8002136:	b30b      	cbz	r3, 800217c <__sfp+0x68>
 8002138:	6836      	ldr	r6, [r6, #0]
 800213a:	e7f7      	b.n	800212c <__sfp+0x18>
 800213c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002140:	b9d5      	cbnz	r5, 8002178 <__sfp+0x64>
 8002142:	4b16      	ldr	r3, [pc, #88]	; (800219c <__sfp+0x88>)
 8002144:	60e3      	str	r3, [r4, #12]
 8002146:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800214a:	6665      	str	r5, [r4, #100]	; 0x64
 800214c:	f000 f86c 	bl	8002228 <__retarget_lock_init_recursive>
 8002150:	f7ff ff96 	bl	8002080 <__sfp_lock_release>
 8002154:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002158:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800215c:	6025      	str	r5, [r4, #0]
 800215e:	61a5      	str	r5, [r4, #24]
 8002160:	2208      	movs	r2, #8
 8002162:	4629      	mov	r1, r5
 8002164:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002168:	f000 f861 	bl	800222e <memset>
 800216c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002170:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002174:	4620      	mov	r0, r4
 8002176:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002178:	3468      	adds	r4, #104	; 0x68
 800217a:	e7d9      	b.n	8002130 <__sfp+0x1c>
 800217c:	2104      	movs	r1, #4
 800217e:	4638      	mov	r0, r7
 8002180:	f7ff ff62 	bl	8002048 <__sfmoreglue>
 8002184:	4604      	mov	r4, r0
 8002186:	6030      	str	r0, [r6, #0]
 8002188:	2800      	cmp	r0, #0
 800218a:	d1d5      	bne.n	8002138 <__sfp+0x24>
 800218c:	f7ff ff78 	bl	8002080 <__sfp_lock_release>
 8002190:	230c      	movs	r3, #12
 8002192:	603b      	str	r3, [r7, #0]
 8002194:	e7ee      	b.n	8002174 <__sfp+0x60>
 8002196:	bf00      	nop
 8002198:	08002b10 	.word	0x08002b10
 800219c:	ffff0001 	.word	0xffff0001

080021a0 <_fwalk_reent>:
 80021a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80021a4:	4606      	mov	r6, r0
 80021a6:	4688      	mov	r8, r1
 80021a8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80021ac:	2700      	movs	r7, #0
 80021ae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80021b2:	f1b9 0901 	subs.w	r9, r9, #1
 80021b6:	d505      	bpl.n	80021c4 <_fwalk_reent+0x24>
 80021b8:	6824      	ldr	r4, [r4, #0]
 80021ba:	2c00      	cmp	r4, #0
 80021bc:	d1f7      	bne.n	80021ae <_fwalk_reent+0xe>
 80021be:	4638      	mov	r0, r7
 80021c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80021c4:	89ab      	ldrh	r3, [r5, #12]
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d907      	bls.n	80021da <_fwalk_reent+0x3a>
 80021ca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80021ce:	3301      	adds	r3, #1
 80021d0:	d003      	beq.n	80021da <_fwalk_reent+0x3a>
 80021d2:	4629      	mov	r1, r5
 80021d4:	4630      	mov	r0, r6
 80021d6:	47c0      	blx	r8
 80021d8:	4307      	orrs	r7, r0
 80021da:	3568      	adds	r5, #104	; 0x68
 80021dc:	e7e9      	b.n	80021b2 <_fwalk_reent+0x12>
	...

080021e0 <__libc_init_array>:
 80021e0:	b570      	push	{r4, r5, r6, lr}
 80021e2:	4d0d      	ldr	r5, [pc, #52]	; (8002218 <__libc_init_array+0x38>)
 80021e4:	4c0d      	ldr	r4, [pc, #52]	; (800221c <__libc_init_array+0x3c>)
 80021e6:	1b64      	subs	r4, r4, r5
 80021e8:	10a4      	asrs	r4, r4, #2
 80021ea:	2600      	movs	r6, #0
 80021ec:	42a6      	cmp	r6, r4
 80021ee:	d109      	bne.n	8002204 <__libc_init_array+0x24>
 80021f0:	4d0b      	ldr	r5, [pc, #44]	; (8002220 <__libc_init_array+0x40>)
 80021f2:	4c0c      	ldr	r4, [pc, #48]	; (8002224 <__libc_init_array+0x44>)
 80021f4:	f000 fc2a 	bl	8002a4c <_init>
 80021f8:	1b64      	subs	r4, r4, r5
 80021fa:	10a4      	asrs	r4, r4, #2
 80021fc:	2600      	movs	r6, #0
 80021fe:	42a6      	cmp	r6, r4
 8002200:	d105      	bne.n	800220e <__libc_init_array+0x2e>
 8002202:	bd70      	pop	{r4, r5, r6, pc}
 8002204:	f855 3b04 	ldr.w	r3, [r5], #4
 8002208:	4798      	blx	r3
 800220a:	3601      	adds	r6, #1
 800220c:	e7ee      	b.n	80021ec <__libc_init_array+0xc>
 800220e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002212:	4798      	blx	r3
 8002214:	3601      	adds	r6, #1
 8002216:	e7f2      	b.n	80021fe <__libc_init_array+0x1e>
 8002218:	08002b1c 	.word	0x08002b1c
 800221c:	08002b1c 	.word	0x08002b1c
 8002220:	08002b1c 	.word	0x08002b1c
 8002224:	08002b20 	.word	0x08002b20

08002228 <__retarget_lock_init_recursive>:
 8002228:	4770      	bx	lr

0800222a <__retarget_lock_acquire_recursive>:
 800222a:	4770      	bx	lr

0800222c <__retarget_lock_release_recursive>:
 800222c:	4770      	bx	lr

0800222e <memset>:
 800222e:	4402      	add	r2, r0
 8002230:	4603      	mov	r3, r0
 8002232:	4293      	cmp	r3, r2
 8002234:	d100      	bne.n	8002238 <memset+0xa>
 8002236:	4770      	bx	lr
 8002238:	f803 1b01 	strb.w	r1, [r3], #1
 800223c:	e7f9      	b.n	8002232 <memset+0x4>
	...

08002240 <sbrk_aligned>:
 8002240:	b570      	push	{r4, r5, r6, lr}
 8002242:	4e0e      	ldr	r6, [pc, #56]	; (800227c <sbrk_aligned+0x3c>)
 8002244:	460c      	mov	r4, r1
 8002246:	6831      	ldr	r1, [r6, #0]
 8002248:	4605      	mov	r5, r0
 800224a:	b911      	cbnz	r1, 8002252 <sbrk_aligned+0x12>
 800224c:	f000 f902 	bl	8002454 <_sbrk_r>
 8002250:	6030      	str	r0, [r6, #0]
 8002252:	4621      	mov	r1, r4
 8002254:	4628      	mov	r0, r5
 8002256:	f000 f8fd 	bl	8002454 <_sbrk_r>
 800225a:	1c43      	adds	r3, r0, #1
 800225c:	d00a      	beq.n	8002274 <sbrk_aligned+0x34>
 800225e:	1cc4      	adds	r4, r0, #3
 8002260:	f024 0403 	bic.w	r4, r4, #3
 8002264:	42a0      	cmp	r0, r4
 8002266:	d007      	beq.n	8002278 <sbrk_aligned+0x38>
 8002268:	1a21      	subs	r1, r4, r0
 800226a:	4628      	mov	r0, r5
 800226c:	f000 f8f2 	bl	8002454 <_sbrk_r>
 8002270:	3001      	adds	r0, #1
 8002272:	d101      	bne.n	8002278 <sbrk_aligned+0x38>
 8002274:	f04f 34ff 	mov.w	r4, #4294967295
 8002278:	4620      	mov	r0, r4
 800227a:	bd70      	pop	{r4, r5, r6, pc}
 800227c:	20000150 	.word	0x20000150

08002280 <_malloc_r>:
 8002280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002284:	1ccd      	adds	r5, r1, #3
 8002286:	f025 0503 	bic.w	r5, r5, #3
 800228a:	3508      	adds	r5, #8
 800228c:	2d0c      	cmp	r5, #12
 800228e:	bf38      	it	cc
 8002290:	250c      	movcc	r5, #12
 8002292:	2d00      	cmp	r5, #0
 8002294:	4607      	mov	r7, r0
 8002296:	db01      	blt.n	800229c <_malloc_r+0x1c>
 8002298:	42a9      	cmp	r1, r5
 800229a:	d905      	bls.n	80022a8 <_malloc_r+0x28>
 800229c:	230c      	movs	r3, #12
 800229e:	603b      	str	r3, [r7, #0]
 80022a0:	2600      	movs	r6, #0
 80022a2:	4630      	mov	r0, r6
 80022a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80022a8:	4e2e      	ldr	r6, [pc, #184]	; (8002364 <_malloc_r+0xe4>)
 80022aa:	f000 fb43 	bl	8002934 <__malloc_lock>
 80022ae:	6833      	ldr	r3, [r6, #0]
 80022b0:	461c      	mov	r4, r3
 80022b2:	bb34      	cbnz	r4, 8002302 <_malloc_r+0x82>
 80022b4:	4629      	mov	r1, r5
 80022b6:	4638      	mov	r0, r7
 80022b8:	f7ff ffc2 	bl	8002240 <sbrk_aligned>
 80022bc:	1c43      	adds	r3, r0, #1
 80022be:	4604      	mov	r4, r0
 80022c0:	d14d      	bne.n	800235e <_malloc_r+0xde>
 80022c2:	6834      	ldr	r4, [r6, #0]
 80022c4:	4626      	mov	r6, r4
 80022c6:	2e00      	cmp	r6, #0
 80022c8:	d140      	bne.n	800234c <_malloc_r+0xcc>
 80022ca:	6823      	ldr	r3, [r4, #0]
 80022cc:	4631      	mov	r1, r6
 80022ce:	4638      	mov	r0, r7
 80022d0:	eb04 0803 	add.w	r8, r4, r3
 80022d4:	f000 f8be 	bl	8002454 <_sbrk_r>
 80022d8:	4580      	cmp	r8, r0
 80022da:	d13a      	bne.n	8002352 <_malloc_r+0xd2>
 80022dc:	6821      	ldr	r1, [r4, #0]
 80022de:	3503      	adds	r5, #3
 80022e0:	1a6d      	subs	r5, r5, r1
 80022e2:	f025 0503 	bic.w	r5, r5, #3
 80022e6:	3508      	adds	r5, #8
 80022e8:	2d0c      	cmp	r5, #12
 80022ea:	bf38      	it	cc
 80022ec:	250c      	movcc	r5, #12
 80022ee:	4629      	mov	r1, r5
 80022f0:	4638      	mov	r0, r7
 80022f2:	f7ff ffa5 	bl	8002240 <sbrk_aligned>
 80022f6:	3001      	adds	r0, #1
 80022f8:	d02b      	beq.n	8002352 <_malloc_r+0xd2>
 80022fa:	6823      	ldr	r3, [r4, #0]
 80022fc:	442b      	add	r3, r5
 80022fe:	6023      	str	r3, [r4, #0]
 8002300:	e00e      	b.n	8002320 <_malloc_r+0xa0>
 8002302:	6822      	ldr	r2, [r4, #0]
 8002304:	1b52      	subs	r2, r2, r5
 8002306:	d41e      	bmi.n	8002346 <_malloc_r+0xc6>
 8002308:	2a0b      	cmp	r2, #11
 800230a:	d916      	bls.n	800233a <_malloc_r+0xba>
 800230c:	1961      	adds	r1, r4, r5
 800230e:	42a3      	cmp	r3, r4
 8002310:	6025      	str	r5, [r4, #0]
 8002312:	bf18      	it	ne
 8002314:	6059      	strne	r1, [r3, #4]
 8002316:	6863      	ldr	r3, [r4, #4]
 8002318:	bf08      	it	eq
 800231a:	6031      	streq	r1, [r6, #0]
 800231c:	5162      	str	r2, [r4, r5]
 800231e:	604b      	str	r3, [r1, #4]
 8002320:	4638      	mov	r0, r7
 8002322:	f104 060b 	add.w	r6, r4, #11
 8002326:	f000 fb0b 	bl	8002940 <__malloc_unlock>
 800232a:	f026 0607 	bic.w	r6, r6, #7
 800232e:	1d23      	adds	r3, r4, #4
 8002330:	1af2      	subs	r2, r6, r3
 8002332:	d0b6      	beq.n	80022a2 <_malloc_r+0x22>
 8002334:	1b9b      	subs	r3, r3, r6
 8002336:	50a3      	str	r3, [r4, r2]
 8002338:	e7b3      	b.n	80022a2 <_malloc_r+0x22>
 800233a:	6862      	ldr	r2, [r4, #4]
 800233c:	42a3      	cmp	r3, r4
 800233e:	bf0c      	ite	eq
 8002340:	6032      	streq	r2, [r6, #0]
 8002342:	605a      	strne	r2, [r3, #4]
 8002344:	e7ec      	b.n	8002320 <_malloc_r+0xa0>
 8002346:	4623      	mov	r3, r4
 8002348:	6864      	ldr	r4, [r4, #4]
 800234a:	e7b2      	b.n	80022b2 <_malloc_r+0x32>
 800234c:	4634      	mov	r4, r6
 800234e:	6876      	ldr	r6, [r6, #4]
 8002350:	e7b9      	b.n	80022c6 <_malloc_r+0x46>
 8002352:	230c      	movs	r3, #12
 8002354:	603b      	str	r3, [r7, #0]
 8002356:	4638      	mov	r0, r7
 8002358:	f000 faf2 	bl	8002940 <__malloc_unlock>
 800235c:	e7a1      	b.n	80022a2 <_malloc_r+0x22>
 800235e:	6025      	str	r5, [r4, #0]
 8002360:	e7de      	b.n	8002320 <_malloc_r+0xa0>
 8002362:	bf00      	nop
 8002364:	2000014c 	.word	0x2000014c

08002368 <_puts_r>:
 8002368:	b570      	push	{r4, r5, r6, lr}
 800236a:	460e      	mov	r6, r1
 800236c:	4605      	mov	r5, r0
 800236e:	b118      	cbz	r0, 8002378 <_puts_r+0x10>
 8002370:	6983      	ldr	r3, [r0, #24]
 8002372:	b90b      	cbnz	r3, 8002378 <_puts_r+0x10>
 8002374:	f7ff fe96 	bl	80020a4 <__sinit>
 8002378:	69ab      	ldr	r3, [r5, #24]
 800237a:	68ac      	ldr	r4, [r5, #8]
 800237c:	b913      	cbnz	r3, 8002384 <_puts_r+0x1c>
 800237e:	4628      	mov	r0, r5
 8002380:	f7ff fe90 	bl	80020a4 <__sinit>
 8002384:	4b2c      	ldr	r3, [pc, #176]	; (8002438 <_puts_r+0xd0>)
 8002386:	429c      	cmp	r4, r3
 8002388:	d120      	bne.n	80023cc <_puts_r+0x64>
 800238a:	686c      	ldr	r4, [r5, #4]
 800238c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800238e:	07db      	lsls	r3, r3, #31
 8002390:	d405      	bmi.n	800239e <_puts_r+0x36>
 8002392:	89a3      	ldrh	r3, [r4, #12]
 8002394:	0598      	lsls	r0, r3, #22
 8002396:	d402      	bmi.n	800239e <_puts_r+0x36>
 8002398:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800239a:	f7ff ff46 	bl	800222a <__retarget_lock_acquire_recursive>
 800239e:	89a3      	ldrh	r3, [r4, #12]
 80023a0:	0719      	lsls	r1, r3, #28
 80023a2:	d51d      	bpl.n	80023e0 <_puts_r+0x78>
 80023a4:	6923      	ldr	r3, [r4, #16]
 80023a6:	b1db      	cbz	r3, 80023e0 <_puts_r+0x78>
 80023a8:	3e01      	subs	r6, #1
 80023aa:	68a3      	ldr	r3, [r4, #8]
 80023ac:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80023b0:	3b01      	subs	r3, #1
 80023b2:	60a3      	str	r3, [r4, #8]
 80023b4:	bb39      	cbnz	r1, 8002406 <_puts_r+0x9e>
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	da38      	bge.n	800242c <_puts_r+0xc4>
 80023ba:	4622      	mov	r2, r4
 80023bc:	210a      	movs	r1, #10
 80023be:	4628      	mov	r0, r5
 80023c0:	f000 f89c 	bl	80024fc <__swbuf_r>
 80023c4:	3001      	adds	r0, #1
 80023c6:	d011      	beq.n	80023ec <_puts_r+0x84>
 80023c8:	250a      	movs	r5, #10
 80023ca:	e011      	b.n	80023f0 <_puts_r+0x88>
 80023cc:	4b1b      	ldr	r3, [pc, #108]	; (800243c <_puts_r+0xd4>)
 80023ce:	429c      	cmp	r4, r3
 80023d0:	d101      	bne.n	80023d6 <_puts_r+0x6e>
 80023d2:	68ac      	ldr	r4, [r5, #8]
 80023d4:	e7da      	b.n	800238c <_puts_r+0x24>
 80023d6:	4b1a      	ldr	r3, [pc, #104]	; (8002440 <_puts_r+0xd8>)
 80023d8:	429c      	cmp	r4, r3
 80023da:	bf08      	it	eq
 80023dc:	68ec      	ldreq	r4, [r5, #12]
 80023de:	e7d5      	b.n	800238c <_puts_r+0x24>
 80023e0:	4621      	mov	r1, r4
 80023e2:	4628      	mov	r0, r5
 80023e4:	f000 f8ee 	bl	80025c4 <__swsetup_r>
 80023e8:	2800      	cmp	r0, #0
 80023ea:	d0dd      	beq.n	80023a8 <_puts_r+0x40>
 80023ec:	f04f 35ff 	mov.w	r5, #4294967295
 80023f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80023f2:	07da      	lsls	r2, r3, #31
 80023f4:	d405      	bmi.n	8002402 <_puts_r+0x9a>
 80023f6:	89a3      	ldrh	r3, [r4, #12]
 80023f8:	059b      	lsls	r3, r3, #22
 80023fa:	d402      	bmi.n	8002402 <_puts_r+0x9a>
 80023fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80023fe:	f7ff ff15 	bl	800222c <__retarget_lock_release_recursive>
 8002402:	4628      	mov	r0, r5
 8002404:	bd70      	pop	{r4, r5, r6, pc}
 8002406:	2b00      	cmp	r3, #0
 8002408:	da04      	bge.n	8002414 <_puts_r+0xac>
 800240a:	69a2      	ldr	r2, [r4, #24]
 800240c:	429a      	cmp	r2, r3
 800240e:	dc06      	bgt.n	800241e <_puts_r+0xb6>
 8002410:	290a      	cmp	r1, #10
 8002412:	d004      	beq.n	800241e <_puts_r+0xb6>
 8002414:	6823      	ldr	r3, [r4, #0]
 8002416:	1c5a      	adds	r2, r3, #1
 8002418:	6022      	str	r2, [r4, #0]
 800241a:	7019      	strb	r1, [r3, #0]
 800241c:	e7c5      	b.n	80023aa <_puts_r+0x42>
 800241e:	4622      	mov	r2, r4
 8002420:	4628      	mov	r0, r5
 8002422:	f000 f86b 	bl	80024fc <__swbuf_r>
 8002426:	3001      	adds	r0, #1
 8002428:	d1bf      	bne.n	80023aa <_puts_r+0x42>
 800242a:	e7df      	b.n	80023ec <_puts_r+0x84>
 800242c:	6823      	ldr	r3, [r4, #0]
 800242e:	250a      	movs	r5, #10
 8002430:	1c5a      	adds	r2, r3, #1
 8002432:	6022      	str	r2, [r4, #0]
 8002434:	701d      	strb	r5, [r3, #0]
 8002436:	e7db      	b.n	80023f0 <_puts_r+0x88>
 8002438:	08002ad0 	.word	0x08002ad0
 800243c:	08002af0 	.word	0x08002af0
 8002440:	08002ab0 	.word	0x08002ab0

08002444 <puts>:
 8002444:	4b02      	ldr	r3, [pc, #8]	; (8002450 <puts+0xc>)
 8002446:	4601      	mov	r1, r0
 8002448:	6818      	ldr	r0, [r3, #0]
 800244a:	f7ff bf8d 	b.w	8002368 <_puts_r>
 800244e:	bf00      	nop
 8002450:	20000014 	.word	0x20000014

08002454 <_sbrk_r>:
 8002454:	b538      	push	{r3, r4, r5, lr}
 8002456:	4d06      	ldr	r5, [pc, #24]	; (8002470 <_sbrk_r+0x1c>)
 8002458:	2300      	movs	r3, #0
 800245a:	4604      	mov	r4, r0
 800245c:	4608      	mov	r0, r1
 800245e:	602b      	str	r3, [r5, #0]
 8002460:	f7fe fae0 	bl	8000a24 <_sbrk>
 8002464:	1c43      	adds	r3, r0, #1
 8002466:	d102      	bne.n	800246e <_sbrk_r+0x1a>
 8002468:	682b      	ldr	r3, [r5, #0]
 800246a:	b103      	cbz	r3, 800246e <_sbrk_r+0x1a>
 800246c:	6023      	str	r3, [r4, #0]
 800246e:	bd38      	pop	{r3, r4, r5, pc}
 8002470:	20000154 	.word	0x20000154

08002474 <__sread>:
 8002474:	b510      	push	{r4, lr}
 8002476:	460c      	mov	r4, r1
 8002478:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800247c:	f000 fab2 	bl	80029e4 <_read_r>
 8002480:	2800      	cmp	r0, #0
 8002482:	bfab      	itete	ge
 8002484:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002486:	89a3      	ldrhlt	r3, [r4, #12]
 8002488:	181b      	addge	r3, r3, r0
 800248a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800248e:	bfac      	ite	ge
 8002490:	6563      	strge	r3, [r4, #84]	; 0x54
 8002492:	81a3      	strhlt	r3, [r4, #12]
 8002494:	bd10      	pop	{r4, pc}

08002496 <__swrite>:
 8002496:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800249a:	461f      	mov	r7, r3
 800249c:	898b      	ldrh	r3, [r1, #12]
 800249e:	05db      	lsls	r3, r3, #23
 80024a0:	4605      	mov	r5, r0
 80024a2:	460c      	mov	r4, r1
 80024a4:	4616      	mov	r6, r2
 80024a6:	d505      	bpl.n	80024b4 <__swrite+0x1e>
 80024a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80024ac:	2302      	movs	r3, #2
 80024ae:	2200      	movs	r2, #0
 80024b0:	f000 f9c8 	bl	8002844 <_lseek_r>
 80024b4:	89a3      	ldrh	r3, [r4, #12]
 80024b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80024ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80024be:	81a3      	strh	r3, [r4, #12]
 80024c0:	4632      	mov	r2, r6
 80024c2:	463b      	mov	r3, r7
 80024c4:	4628      	mov	r0, r5
 80024c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80024ca:	f000 b869 	b.w	80025a0 <_write_r>

080024ce <__sseek>:
 80024ce:	b510      	push	{r4, lr}
 80024d0:	460c      	mov	r4, r1
 80024d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80024d6:	f000 f9b5 	bl	8002844 <_lseek_r>
 80024da:	1c43      	adds	r3, r0, #1
 80024dc:	89a3      	ldrh	r3, [r4, #12]
 80024de:	bf15      	itete	ne
 80024e0:	6560      	strne	r0, [r4, #84]	; 0x54
 80024e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80024e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80024ea:	81a3      	strheq	r3, [r4, #12]
 80024ec:	bf18      	it	ne
 80024ee:	81a3      	strhne	r3, [r4, #12]
 80024f0:	bd10      	pop	{r4, pc}

080024f2 <__sclose>:
 80024f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80024f6:	f000 b8d3 	b.w	80026a0 <_close_r>
	...

080024fc <__swbuf_r>:
 80024fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024fe:	460e      	mov	r6, r1
 8002500:	4614      	mov	r4, r2
 8002502:	4605      	mov	r5, r0
 8002504:	b118      	cbz	r0, 800250e <__swbuf_r+0x12>
 8002506:	6983      	ldr	r3, [r0, #24]
 8002508:	b90b      	cbnz	r3, 800250e <__swbuf_r+0x12>
 800250a:	f7ff fdcb 	bl	80020a4 <__sinit>
 800250e:	4b21      	ldr	r3, [pc, #132]	; (8002594 <__swbuf_r+0x98>)
 8002510:	429c      	cmp	r4, r3
 8002512:	d12b      	bne.n	800256c <__swbuf_r+0x70>
 8002514:	686c      	ldr	r4, [r5, #4]
 8002516:	69a3      	ldr	r3, [r4, #24]
 8002518:	60a3      	str	r3, [r4, #8]
 800251a:	89a3      	ldrh	r3, [r4, #12]
 800251c:	071a      	lsls	r2, r3, #28
 800251e:	d52f      	bpl.n	8002580 <__swbuf_r+0x84>
 8002520:	6923      	ldr	r3, [r4, #16]
 8002522:	b36b      	cbz	r3, 8002580 <__swbuf_r+0x84>
 8002524:	6923      	ldr	r3, [r4, #16]
 8002526:	6820      	ldr	r0, [r4, #0]
 8002528:	1ac0      	subs	r0, r0, r3
 800252a:	6963      	ldr	r3, [r4, #20]
 800252c:	b2f6      	uxtb	r6, r6
 800252e:	4283      	cmp	r3, r0
 8002530:	4637      	mov	r7, r6
 8002532:	dc04      	bgt.n	800253e <__swbuf_r+0x42>
 8002534:	4621      	mov	r1, r4
 8002536:	4628      	mov	r0, r5
 8002538:	f000 f948 	bl	80027cc <_fflush_r>
 800253c:	bb30      	cbnz	r0, 800258c <__swbuf_r+0x90>
 800253e:	68a3      	ldr	r3, [r4, #8]
 8002540:	3b01      	subs	r3, #1
 8002542:	60a3      	str	r3, [r4, #8]
 8002544:	6823      	ldr	r3, [r4, #0]
 8002546:	1c5a      	adds	r2, r3, #1
 8002548:	6022      	str	r2, [r4, #0]
 800254a:	701e      	strb	r6, [r3, #0]
 800254c:	6963      	ldr	r3, [r4, #20]
 800254e:	3001      	adds	r0, #1
 8002550:	4283      	cmp	r3, r0
 8002552:	d004      	beq.n	800255e <__swbuf_r+0x62>
 8002554:	89a3      	ldrh	r3, [r4, #12]
 8002556:	07db      	lsls	r3, r3, #31
 8002558:	d506      	bpl.n	8002568 <__swbuf_r+0x6c>
 800255a:	2e0a      	cmp	r6, #10
 800255c:	d104      	bne.n	8002568 <__swbuf_r+0x6c>
 800255e:	4621      	mov	r1, r4
 8002560:	4628      	mov	r0, r5
 8002562:	f000 f933 	bl	80027cc <_fflush_r>
 8002566:	b988      	cbnz	r0, 800258c <__swbuf_r+0x90>
 8002568:	4638      	mov	r0, r7
 800256a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800256c:	4b0a      	ldr	r3, [pc, #40]	; (8002598 <__swbuf_r+0x9c>)
 800256e:	429c      	cmp	r4, r3
 8002570:	d101      	bne.n	8002576 <__swbuf_r+0x7a>
 8002572:	68ac      	ldr	r4, [r5, #8]
 8002574:	e7cf      	b.n	8002516 <__swbuf_r+0x1a>
 8002576:	4b09      	ldr	r3, [pc, #36]	; (800259c <__swbuf_r+0xa0>)
 8002578:	429c      	cmp	r4, r3
 800257a:	bf08      	it	eq
 800257c:	68ec      	ldreq	r4, [r5, #12]
 800257e:	e7ca      	b.n	8002516 <__swbuf_r+0x1a>
 8002580:	4621      	mov	r1, r4
 8002582:	4628      	mov	r0, r5
 8002584:	f000 f81e 	bl	80025c4 <__swsetup_r>
 8002588:	2800      	cmp	r0, #0
 800258a:	d0cb      	beq.n	8002524 <__swbuf_r+0x28>
 800258c:	f04f 37ff 	mov.w	r7, #4294967295
 8002590:	e7ea      	b.n	8002568 <__swbuf_r+0x6c>
 8002592:	bf00      	nop
 8002594:	08002ad0 	.word	0x08002ad0
 8002598:	08002af0 	.word	0x08002af0
 800259c:	08002ab0 	.word	0x08002ab0

080025a0 <_write_r>:
 80025a0:	b538      	push	{r3, r4, r5, lr}
 80025a2:	4d07      	ldr	r5, [pc, #28]	; (80025c0 <_write_r+0x20>)
 80025a4:	4604      	mov	r4, r0
 80025a6:	4608      	mov	r0, r1
 80025a8:	4611      	mov	r1, r2
 80025aa:	2200      	movs	r2, #0
 80025ac:	602a      	str	r2, [r5, #0]
 80025ae:	461a      	mov	r2, r3
 80025b0:	f7ff fb1f 	bl	8001bf2 <_write>
 80025b4:	1c43      	adds	r3, r0, #1
 80025b6:	d102      	bne.n	80025be <_write_r+0x1e>
 80025b8:	682b      	ldr	r3, [r5, #0]
 80025ba:	b103      	cbz	r3, 80025be <_write_r+0x1e>
 80025bc:	6023      	str	r3, [r4, #0]
 80025be:	bd38      	pop	{r3, r4, r5, pc}
 80025c0:	20000154 	.word	0x20000154

080025c4 <__swsetup_r>:
 80025c4:	4b32      	ldr	r3, [pc, #200]	; (8002690 <__swsetup_r+0xcc>)
 80025c6:	b570      	push	{r4, r5, r6, lr}
 80025c8:	681d      	ldr	r5, [r3, #0]
 80025ca:	4606      	mov	r6, r0
 80025cc:	460c      	mov	r4, r1
 80025ce:	b125      	cbz	r5, 80025da <__swsetup_r+0x16>
 80025d0:	69ab      	ldr	r3, [r5, #24]
 80025d2:	b913      	cbnz	r3, 80025da <__swsetup_r+0x16>
 80025d4:	4628      	mov	r0, r5
 80025d6:	f7ff fd65 	bl	80020a4 <__sinit>
 80025da:	4b2e      	ldr	r3, [pc, #184]	; (8002694 <__swsetup_r+0xd0>)
 80025dc:	429c      	cmp	r4, r3
 80025de:	d10f      	bne.n	8002600 <__swsetup_r+0x3c>
 80025e0:	686c      	ldr	r4, [r5, #4]
 80025e2:	89a3      	ldrh	r3, [r4, #12]
 80025e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80025e8:	0719      	lsls	r1, r3, #28
 80025ea:	d42c      	bmi.n	8002646 <__swsetup_r+0x82>
 80025ec:	06dd      	lsls	r5, r3, #27
 80025ee:	d411      	bmi.n	8002614 <__swsetup_r+0x50>
 80025f0:	2309      	movs	r3, #9
 80025f2:	6033      	str	r3, [r6, #0]
 80025f4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80025f8:	81a3      	strh	r3, [r4, #12]
 80025fa:	f04f 30ff 	mov.w	r0, #4294967295
 80025fe:	e03e      	b.n	800267e <__swsetup_r+0xba>
 8002600:	4b25      	ldr	r3, [pc, #148]	; (8002698 <__swsetup_r+0xd4>)
 8002602:	429c      	cmp	r4, r3
 8002604:	d101      	bne.n	800260a <__swsetup_r+0x46>
 8002606:	68ac      	ldr	r4, [r5, #8]
 8002608:	e7eb      	b.n	80025e2 <__swsetup_r+0x1e>
 800260a:	4b24      	ldr	r3, [pc, #144]	; (800269c <__swsetup_r+0xd8>)
 800260c:	429c      	cmp	r4, r3
 800260e:	bf08      	it	eq
 8002610:	68ec      	ldreq	r4, [r5, #12]
 8002612:	e7e6      	b.n	80025e2 <__swsetup_r+0x1e>
 8002614:	0758      	lsls	r0, r3, #29
 8002616:	d512      	bpl.n	800263e <__swsetup_r+0x7a>
 8002618:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800261a:	b141      	cbz	r1, 800262e <__swsetup_r+0x6a>
 800261c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002620:	4299      	cmp	r1, r3
 8002622:	d002      	beq.n	800262a <__swsetup_r+0x66>
 8002624:	4630      	mov	r0, r6
 8002626:	f000 f991 	bl	800294c <_free_r>
 800262a:	2300      	movs	r3, #0
 800262c:	6363      	str	r3, [r4, #52]	; 0x34
 800262e:	89a3      	ldrh	r3, [r4, #12]
 8002630:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002634:	81a3      	strh	r3, [r4, #12]
 8002636:	2300      	movs	r3, #0
 8002638:	6063      	str	r3, [r4, #4]
 800263a:	6923      	ldr	r3, [r4, #16]
 800263c:	6023      	str	r3, [r4, #0]
 800263e:	89a3      	ldrh	r3, [r4, #12]
 8002640:	f043 0308 	orr.w	r3, r3, #8
 8002644:	81a3      	strh	r3, [r4, #12]
 8002646:	6923      	ldr	r3, [r4, #16]
 8002648:	b94b      	cbnz	r3, 800265e <__swsetup_r+0x9a>
 800264a:	89a3      	ldrh	r3, [r4, #12]
 800264c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002650:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002654:	d003      	beq.n	800265e <__swsetup_r+0x9a>
 8002656:	4621      	mov	r1, r4
 8002658:	4630      	mov	r0, r6
 800265a:	f000 f92b 	bl	80028b4 <__smakebuf_r>
 800265e:	89a0      	ldrh	r0, [r4, #12]
 8002660:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002664:	f010 0301 	ands.w	r3, r0, #1
 8002668:	d00a      	beq.n	8002680 <__swsetup_r+0xbc>
 800266a:	2300      	movs	r3, #0
 800266c:	60a3      	str	r3, [r4, #8]
 800266e:	6963      	ldr	r3, [r4, #20]
 8002670:	425b      	negs	r3, r3
 8002672:	61a3      	str	r3, [r4, #24]
 8002674:	6923      	ldr	r3, [r4, #16]
 8002676:	b943      	cbnz	r3, 800268a <__swsetup_r+0xc6>
 8002678:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800267c:	d1ba      	bne.n	80025f4 <__swsetup_r+0x30>
 800267e:	bd70      	pop	{r4, r5, r6, pc}
 8002680:	0781      	lsls	r1, r0, #30
 8002682:	bf58      	it	pl
 8002684:	6963      	ldrpl	r3, [r4, #20]
 8002686:	60a3      	str	r3, [r4, #8]
 8002688:	e7f4      	b.n	8002674 <__swsetup_r+0xb0>
 800268a:	2000      	movs	r0, #0
 800268c:	e7f7      	b.n	800267e <__swsetup_r+0xba>
 800268e:	bf00      	nop
 8002690:	20000014 	.word	0x20000014
 8002694:	08002ad0 	.word	0x08002ad0
 8002698:	08002af0 	.word	0x08002af0
 800269c:	08002ab0 	.word	0x08002ab0

080026a0 <_close_r>:
 80026a0:	b538      	push	{r3, r4, r5, lr}
 80026a2:	4d06      	ldr	r5, [pc, #24]	; (80026bc <_close_r+0x1c>)
 80026a4:	2300      	movs	r3, #0
 80026a6:	4604      	mov	r4, r0
 80026a8:	4608      	mov	r0, r1
 80026aa:	602b      	str	r3, [r5, #0]
 80026ac:	f7ff fad2 	bl	8001c54 <_close>
 80026b0:	1c43      	adds	r3, r0, #1
 80026b2:	d102      	bne.n	80026ba <_close_r+0x1a>
 80026b4:	682b      	ldr	r3, [r5, #0]
 80026b6:	b103      	cbz	r3, 80026ba <_close_r+0x1a>
 80026b8:	6023      	str	r3, [r4, #0]
 80026ba:	bd38      	pop	{r3, r4, r5, pc}
 80026bc:	20000154 	.word	0x20000154

080026c0 <__sflush_r>:
 80026c0:	898a      	ldrh	r2, [r1, #12]
 80026c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80026c6:	4605      	mov	r5, r0
 80026c8:	0710      	lsls	r0, r2, #28
 80026ca:	460c      	mov	r4, r1
 80026cc:	d458      	bmi.n	8002780 <__sflush_r+0xc0>
 80026ce:	684b      	ldr	r3, [r1, #4]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	dc05      	bgt.n	80026e0 <__sflush_r+0x20>
 80026d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	dc02      	bgt.n	80026e0 <__sflush_r+0x20>
 80026da:	2000      	movs	r0, #0
 80026dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80026e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80026e2:	2e00      	cmp	r6, #0
 80026e4:	d0f9      	beq.n	80026da <__sflush_r+0x1a>
 80026e6:	2300      	movs	r3, #0
 80026e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80026ec:	682f      	ldr	r7, [r5, #0]
 80026ee:	602b      	str	r3, [r5, #0]
 80026f0:	d032      	beq.n	8002758 <__sflush_r+0x98>
 80026f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80026f4:	89a3      	ldrh	r3, [r4, #12]
 80026f6:	075a      	lsls	r2, r3, #29
 80026f8:	d505      	bpl.n	8002706 <__sflush_r+0x46>
 80026fa:	6863      	ldr	r3, [r4, #4]
 80026fc:	1ac0      	subs	r0, r0, r3
 80026fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002700:	b10b      	cbz	r3, 8002706 <__sflush_r+0x46>
 8002702:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002704:	1ac0      	subs	r0, r0, r3
 8002706:	2300      	movs	r3, #0
 8002708:	4602      	mov	r2, r0
 800270a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800270c:	6a21      	ldr	r1, [r4, #32]
 800270e:	4628      	mov	r0, r5
 8002710:	47b0      	blx	r6
 8002712:	1c43      	adds	r3, r0, #1
 8002714:	89a3      	ldrh	r3, [r4, #12]
 8002716:	d106      	bne.n	8002726 <__sflush_r+0x66>
 8002718:	6829      	ldr	r1, [r5, #0]
 800271a:	291d      	cmp	r1, #29
 800271c:	d82c      	bhi.n	8002778 <__sflush_r+0xb8>
 800271e:	4a2a      	ldr	r2, [pc, #168]	; (80027c8 <__sflush_r+0x108>)
 8002720:	40ca      	lsrs	r2, r1
 8002722:	07d6      	lsls	r6, r2, #31
 8002724:	d528      	bpl.n	8002778 <__sflush_r+0xb8>
 8002726:	2200      	movs	r2, #0
 8002728:	6062      	str	r2, [r4, #4]
 800272a:	04d9      	lsls	r1, r3, #19
 800272c:	6922      	ldr	r2, [r4, #16]
 800272e:	6022      	str	r2, [r4, #0]
 8002730:	d504      	bpl.n	800273c <__sflush_r+0x7c>
 8002732:	1c42      	adds	r2, r0, #1
 8002734:	d101      	bne.n	800273a <__sflush_r+0x7a>
 8002736:	682b      	ldr	r3, [r5, #0]
 8002738:	b903      	cbnz	r3, 800273c <__sflush_r+0x7c>
 800273a:	6560      	str	r0, [r4, #84]	; 0x54
 800273c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800273e:	602f      	str	r7, [r5, #0]
 8002740:	2900      	cmp	r1, #0
 8002742:	d0ca      	beq.n	80026da <__sflush_r+0x1a>
 8002744:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002748:	4299      	cmp	r1, r3
 800274a:	d002      	beq.n	8002752 <__sflush_r+0x92>
 800274c:	4628      	mov	r0, r5
 800274e:	f000 f8fd 	bl	800294c <_free_r>
 8002752:	2000      	movs	r0, #0
 8002754:	6360      	str	r0, [r4, #52]	; 0x34
 8002756:	e7c1      	b.n	80026dc <__sflush_r+0x1c>
 8002758:	6a21      	ldr	r1, [r4, #32]
 800275a:	2301      	movs	r3, #1
 800275c:	4628      	mov	r0, r5
 800275e:	47b0      	blx	r6
 8002760:	1c41      	adds	r1, r0, #1
 8002762:	d1c7      	bne.n	80026f4 <__sflush_r+0x34>
 8002764:	682b      	ldr	r3, [r5, #0]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d0c4      	beq.n	80026f4 <__sflush_r+0x34>
 800276a:	2b1d      	cmp	r3, #29
 800276c:	d001      	beq.n	8002772 <__sflush_r+0xb2>
 800276e:	2b16      	cmp	r3, #22
 8002770:	d101      	bne.n	8002776 <__sflush_r+0xb6>
 8002772:	602f      	str	r7, [r5, #0]
 8002774:	e7b1      	b.n	80026da <__sflush_r+0x1a>
 8002776:	89a3      	ldrh	r3, [r4, #12]
 8002778:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800277c:	81a3      	strh	r3, [r4, #12]
 800277e:	e7ad      	b.n	80026dc <__sflush_r+0x1c>
 8002780:	690f      	ldr	r7, [r1, #16]
 8002782:	2f00      	cmp	r7, #0
 8002784:	d0a9      	beq.n	80026da <__sflush_r+0x1a>
 8002786:	0793      	lsls	r3, r2, #30
 8002788:	680e      	ldr	r6, [r1, #0]
 800278a:	bf08      	it	eq
 800278c:	694b      	ldreq	r3, [r1, #20]
 800278e:	600f      	str	r7, [r1, #0]
 8002790:	bf18      	it	ne
 8002792:	2300      	movne	r3, #0
 8002794:	eba6 0807 	sub.w	r8, r6, r7
 8002798:	608b      	str	r3, [r1, #8]
 800279a:	f1b8 0f00 	cmp.w	r8, #0
 800279e:	dd9c      	ble.n	80026da <__sflush_r+0x1a>
 80027a0:	6a21      	ldr	r1, [r4, #32]
 80027a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80027a4:	4643      	mov	r3, r8
 80027a6:	463a      	mov	r2, r7
 80027a8:	4628      	mov	r0, r5
 80027aa:	47b0      	blx	r6
 80027ac:	2800      	cmp	r0, #0
 80027ae:	dc06      	bgt.n	80027be <__sflush_r+0xfe>
 80027b0:	89a3      	ldrh	r3, [r4, #12]
 80027b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027b6:	81a3      	strh	r3, [r4, #12]
 80027b8:	f04f 30ff 	mov.w	r0, #4294967295
 80027bc:	e78e      	b.n	80026dc <__sflush_r+0x1c>
 80027be:	4407      	add	r7, r0
 80027c0:	eba8 0800 	sub.w	r8, r8, r0
 80027c4:	e7e9      	b.n	800279a <__sflush_r+0xda>
 80027c6:	bf00      	nop
 80027c8:	20400001 	.word	0x20400001

080027cc <_fflush_r>:
 80027cc:	b538      	push	{r3, r4, r5, lr}
 80027ce:	690b      	ldr	r3, [r1, #16]
 80027d0:	4605      	mov	r5, r0
 80027d2:	460c      	mov	r4, r1
 80027d4:	b913      	cbnz	r3, 80027dc <_fflush_r+0x10>
 80027d6:	2500      	movs	r5, #0
 80027d8:	4628      	mov	r0, r5
 80027da:	bd38      	pop	{r3, r4, r5, pc}
 80027dc:	b118      	cbz	r0, 80027e6 <_fflush_r+0x1a>
 80027de:	6983      	ldr	r3, [r0, #24]
 80027e0:	b90b      	cbnz	r3, 80027e6 <_fflush_r+0x1a>
 80027e2:	f7ff fc5f 	bl	80020a4 <__sinit>
 80027e6:	4b14      	ldr	r3, [pc, #80]	; (8002838 <_fflush_r+0x6c>)
 80027e8:	429c      	cmp	r4, r3
 80027ea:	d11b      	bne.n	8002824 <_fflush_r+0x58>
 80027ec:	686c      	ldr	r4, [r5, #4]
 80027ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d0ef      	beq.n	80027d6 <_fflush_r+0xa>
 80027f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80027f8:	07d0      	lsls	r0, r2, #31
 80027fa:	d404      	bmi.n	8002806 <_fflush_r+0x3a>
 80027fc:	0599      	lsls	r1, r3, #22
 80027fe:	d402      	bmi.n	8002806 <_fflush_r+0x3a>
 8002800:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002802:	f7ff fd12 	bl	800222a <__retarget_lock_acquire_recursive>
 8002806:	4628      	mov	r0, r5
 8002808:	4621      	mov	r1, r4
 800280a:	f7ff ff59 	bl	80026c0 <__sflush_r>
 800280e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002810:	07da      	lsls	r2, r3, #31
 8002812:	4605      	mov	r5, r0
 8002814:	d4e0      	bmi.n	80027d8 <_fflush_r+0xc>
 8002816:	89a3      	ldrh	r3, [r4, #12]
 8002818:	059b      	lsls	r3, r3, #22
 800281a:	d4dd      	bmi.n	80027d8 <_fflush_r+0xc>
 800281c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800281e:	f7ff fd05 	bl	800222c <__retarget_lock_release_recursive>
 8002822:	e7d9      	b.n	80027d8 <_fflush_r+0xc>
 8002824:	4b05      	ldr	r3, [pc, #20]	; (800283c <_fflush_r+0x70>)
 8002826:	429c      	cmp	r4, r3
 8002828:	d101      	bne.n	800282e <_fflush_r+0x62>
 800282a:	68ac      	ldr	r4, [r5, #8]
 800282c:	e7df      	b.n	80027ee <_fflush_r+0x22>
 800282e:	4b04      	ldr	r3, [pc, #16]	; (8002840 <_fflush_r+0x74>)
 8002830:	429c      	cmp	r4, r3
 8002832:	bf08      	it	eq
 8002834:	68ec      	ldreq	r4, [r5, #12]
 8002836:	e7da      	b.n	80027ee <_fflush_r+0x22>
 8002838:	08002ad0 	.word	0x08002ad0
 800283c:	08002af0 	.word	0x08002af0
 8002840:	08002ab0 	.word	0x08002ab0

08002844 <_lseek_r>:
 8002844:	b538      	push	{r3, r4, r5, lr}
 8002846:	4d07      	ldr	r5, [pc, #28]	; (8002864 <_lseek_r+0x20>)
 8002848:	4604      	mov	r4, r0
 800284a:	4608      	mov	r0, r1
 800284c:	4611      	mov	r1, r2
 800284e:	2200      	movs	r2, #0
 8002850:	602a      	str	r2, [r5, #0]
 8002852:	461a      	mov	r2, r3
 8002854:	f7ff f9bb 	bl	8001bce <_lseek>
 8002858:	1c43      	adds	r3, r0, #1
 800285a:	d102      	bne.n	8002862 <_lseek_r+0x1e>
 800285c:	682b      	ldr	r3, [r5, #0]
 800285e:	b103      	cbz	r3, 8002862 <_lseek_r+0x1e>
 8002860:	6023      	str	r3, [r4, #0]
 8002862:	bd38      	pop	{r3, r4, r5, pc}
 8002864:	20000154 	.word	0x20000154

08002868 <__swhatbuf_r>:
 8002868:	b570      	push	{r4, r5, r6, lr}
 800286a:	460e      	mov	r6, r1
 800286c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002870:	2900      	cmp	r1, #0
 8002872:	b096      	sub	sp, #88	; 0x58
 8002874:	4614      	mov	r4, r2
 8002876:	461d      	mov	r5, r3
 8002878:	da08      	bge.n	800288c <__swhatbuf_r+0x24>
 800287a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800287e:	2200      	movs	r2, #0
 8002880:	602a      	str	r2, [r5, #0]
 8002882:	061a      	lsls	r2, r3, #24
 8002884:	d410      	bmi.n	80028a8 <__swhatbuf_r+0x40>
 8002886:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800288a:	e00e      	b.n	80028aa <__swhatbuf_r+0x42>
 800288c:	466a      	mov	r2, sp
 800288e:	f000 f8bb 	bl	8002a08 <_fstat_r>
 8002892:	2800      	cmp	r0, #0
 8002894:	dbf1      	blt.n	800287a <__swhatbuf_r+0x12>
 8002896:	9a01      	ldr	r2, [sp, #4]
 8002898:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800289c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80028a0:	425a      	negs	r2, r3
 80028a2:	415a      	adcs	r2, r3
 80028a4:	602a      	str	r2, [r5, #0]
 80028a6:	e7ee      	b.n	8002886 <__swhatbuf_r+0x1e>
 80028a8:	2340      	movs	r3, #64	; 0x40
 80028aa:	2000      	movs	r0, #0
 80028ac:	6023      	str	r3, [r4, #0]
 80028ae:	b016      	add	sp, #88	; 0x58
 80028b0:	bd70      	pop	{r4, r5, r6, pc}
	...

080028b4 <__smakebuf_r>:
 80028b4:	898b      	ldrh	r3, [r1, #12]
 80028b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80028b8:	079d      	lsls	r5, r3, #30
 80028ba:	4606      	mov	r6, r0
 80028bc:	460c      	mov	r4, r1
 80028be:	d507      	bpl.n	80028d0 <__smakebuf_r+0x1c>
 80028c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80028c4:	6023      	str	r3, [r4, #0]
 80028c6:	6123      	str	r3, [r4, #16]
 80028c8:	2301      	movs	r3, #1
 80028ca:	6163      	str	r3, [r4, #20]
 80028cc:	b002      	add	sp, #8
 80028ce:	bd70      	pop	{r4, r5, r6, pc}
 80028d0:	ab01      	add	r3, sp, #4
 80028d2:	466a      	mov	r2, sp
 80028d4:	f7ff ffc8 	bl	8002868 <__swhatbuf_r>
 80028d8:	9900      	ldr	r1, [sp, #0]
 80028da:	4605      	mov	r5, r0
 80028dc:	4630      	mov	r0, r6
 80028de:	f7ff fccf 	bl	8002280 <_malloc_r>
 80028e2:	b948      	cbnz	r0, 80028f8 <__smakebuf_r+0x44>
 80028e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80028e8:	059a      	lsls	r2, r3, #22
 80028ea:	d4ef      	bmi.n	80028cc <__smakebuf_r+0x18>
 80028ec:	f023 0303 	bic.w	r3, r3, #3
 80028f0:	f043 0302 	orr.w	r3, r3, #2
 80028f4:	81a3      	strh	r3, [r4, #12]
 80028f6:	e7e3      	b.n	80028c0 <__smakebuf_r+0xc>
 80028f8:	4b0d      	ldr	r3, [pc, #52]	; (8002930 <__smakebuf_r+0x7c>)
 80028fa:	62b3      	str	r3, [r6, #40]	; 0x28
 80028fc:	89a3      	ldrh	r3, [r4, #12]
 80028fe:	6020      	str	r0, [r4, #0]
 8002900:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002904:	81a3      	strh	r3, [r4, #12]
 8002906:	9b00      	ldr	r3, [sp, #0]
 8002908:	6163      	str	r3, [r4, #20]
 800290a:	9b01      	ldr	r3, [sp, #4]
 800290c:	6120      	str	r0, [r4, #16]
 800290e:	b15b      	cbz	r3, 8002928 <__smakebuf_r+0x74>
 8002910:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002914:	4630      	mov	r0, r6
 8002916:	f000 f889 	bl	8002a2c <_isatty_r>
 800291a:	b128      	cbz	r0, 8002928 <__smakebuf_r+0x74>
 800291c:	89a3      	ldrh	r3, [r4, #12]
 800291e:	f023 0303 	bic.w	r3, r3, #3
 8002922:	f043 0301 	orr.w	r3, r3, #1
 8002926:	81a3      	strh	r3, [r4, #12]
 8002928:	89a0      	ldrh	r0, [r4, #12]
 800292a:	4305      	orrs	r5, r0
 800292c:	81a5      	strh	r5, [r4, #12]
 800292e:	e7cd      	b.n	80028cc <__smakebuf_r+0x18>
 8002930:	0800203d 	.word	0x0800203d

08002934 <__malloc_lock>:
 8002934:	4801      	ldr	r0, [pc, #4]	; (800293c <__malloc_lock+0x8>)
 8002936:	f7ff bc78 	b.w	800222a <__retarget_lock_acquire_recursive>
 800293a:	bf00      	nop
 800293c:	20000148 	.word	0x20000148

08002940 <__malloc_unlock>:
 8002940:	4801      	ldr	r0, [pc, #4]	; (8002948 <__malloc_unlock+0x8>)
 8002942:	f7ff bc73 	b.w	800222c <__retarget_lock_release_recursive>
 8002946:	bf00      	nop
 8002948:	20000148 	.word	0x20000148

0800294c <_free_r>:
 800294c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800294e:	2900      	cmp	r1, #0
 8002950:	d044      	beq.n	80029dc <_free_r+0x90>
 8002952:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002956:	9001      	str	r0, [sp, #4]
 8002958:	2b00      	cmp	r3, #0
 800295a:	f1a1 0404 	sub.w	r4, r1, #4
 800295e:	bfb8      	it	lt
 8002960:	18e4      	addlt	r4, r4, r3
 8002962:	f7ff ffe7 	bl	8002934 <__malloc_lock>
 8002966:	4a1e      	ldr	r2, [pc, #120]	; (80029e0 <_free_r+0x94>)
 8002968:	9801      	ldr	r0, [sp, #4]
 800296a:	6813      	ldr	r3, [r2, #0]
 800296c:	b933      	cbnz	r3, 800297c <_free_r+0x30>
 800296e:	6063      	str	r3, [r4, #4]
 8002970:	6014      	str	r4, [r2, #0]
 8002972:	b003      	add	sp, #12
 8002974:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002978:	f7ff bfe2 	b.w	8002940 <__malloc_unlock>
 800297c:	42a3      	cmp	r3, r4
 800297e:	d908      	bls.n	8002992 <_free_r+0x46>
 8002980:	6825      	ldr	r5, [r4, #0]
 8002982:	1961      	adds	r1, r4, r5
 8002984:	428b      	cmp	r3, r1
 8002986:	bf01      	itttt	eq
 8002988:	6819      	ldreq	r1, [r3, #0]
 800298a:	685b      	ldreq	r3, [r3, #4]
 800298c:	1949      	addeq	r1, r1, r5
 800298e:	6021      	streq	r1, [r4, #0]
 8002990:	e7ed      	b.n	800296e <_free_r+0x22>
 8002992:	461a      	mov	r2, r3
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	b10b      	cbz	r3, 800299c <_free_r+0x50>
 8002998:	42a3      	cmp	r3, r4
 800299a:	d9fa      	bls.n	8002992 <_free_r+0x46>
 800299c:	6811      	ldr	r1, [r2, #0]
 800299e:	1855      	adds	r5, r2, r1
 80029a0:	42a5      	cmp	r5, r4
 80029a2:	d10b      	bne.n	80029bc <_free_r+0x70>
 80029a4:	6824      	ldr	r4, [r4, #0]
 80029a6:	4421      	add	r1, r4
 80029a8:	1854      	adds	r4, r2, r1
 80029aa:	42a3      	cmp	r3, r4
 80029ac:	6011      	str	r1, [r2, #0]
 80029ae:	d1e0      	bne.n	8002972 <_free_r+0x26>
 80029b0:	681c      	ldr	r4, [r3, #0]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	6053      	str	r3, [r2, #4]
 80029b6:	4421      	add	r1, r4
 80029b8:	6011      	str	r1, [r2, #0]
 80029ba:	e7da      	b.n	8002972 <_free_r+0x26>
 80029bc:	d902      	bls.n	80029c4 <_free_r+0x78>
 80029be:	230c      	movs	r3, #12
 80029c0:	6003      	str	r3, [r0, #0]
 80029c2:	e7d6      	b.n	8002972 <_free_r+0x26>
 80029c4:	6825      	ldr	r5, [r4, #0]
 80029c6:	1961      	adds	r1, r4, r5
 80029c8:	428b      	cmp	r3, r1
 80029ca:	bf04      	itt	eq
 80029cc:	6819      	ldreq	r1, [r3, #0]
 80029ce:	685b      	ldreq	r3, [r3, #4]
 80029d0:	6063      	str	r3, [r4, #4]
 80029d2:	bf04      	itt	eq
 80029d4:	1949      	addeq	r1, r1, r5
 80029d6:	6021      	streq	r1, [r4, #0]
 80029d8:	6054      	str	r4, [r2, #4]
 80029da:	e7ca      	b.n	8002972 <_free_r+0x26>
 80029dc:	b003      	add	sp, #12
 80029de:	bd30      	pop	{r4, r5, pc}
 80029e0:	2000014c 	.word	0x2000014c

080029e4 <_read_r>:
 80029e4:	b538      	push	{r3, r4, r5, lr}
 80029e6:	4d07      	ldr	r5, [pc, #28]	; (8002a04 <_read_r+0x20>)
 80029e8:	4604      	mov	r4, r0
 80029ea:	4608      	mov	r0, r1
 80029ec:	4611      	mov	r1, r2
 80029ee:	2200      	movs	r2, #0
 80029f0:	602a      	str	r2, [r5, #0]
 80029f2:	461a      	mov	r2, r3
 80029f4:	f7ff f893 	bl	8001b1e <_read>
 80029f8:	1c43      	adds	r3, r0, #1
 80029fa:	d102      	bne.n	8002a02 <_read_r+0x1e>
 80029fc:	682b      	ldr	r3, [r5, #0]
 80029fe:	b103      	cbz	r3, 8002a02 <_read_r+0x1e>
 8002a00:	6023      	str	r3, [r4, #0]
 8002a02:	bd38      	pop	{r3, r4, r5, pc}
 8002a04:	20000154 	.word	0x20000154

08002a08 <_fstat_r>:
 8002a08:	b538      	push	{r3, r4, r5, lr}
 8002a0a:	4d07      	ldr	r5, [pc, #28]	; (8002a28 <_fstat_r+0x20>)
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	4604      	mov	r4, r0
 8002a10:	4608      	mov	r0, r1
 8002a12:	4611      	mov	r1, r2
 8002a14:	602b      	str	r3, [r5, #0]
 8002a16:	f7ff f964 	bl	8001ce2 <_fstat>
 8002a1a:	1c43      	adds	r3, r0, #1
 8002a1c:	d102      	bne.n	8002a24 <_fstat_r+0x1c>
 8002a1e:	682b      	ldr	r3, [r5, #0]
 8002a20:	b103      	cbz	r3, 8002a24 <_fstat_r+0x1c>
 8002a22:	6023      	str	r3, [r4, #0]
 8002a24:	bd38      	pop	{r3, r4, r5, pc}
 8002a26:	bf00      	nop
 8002a28:	20000154 	.word	0x20000154

08002a2c <_isatty_r>:
 8002a2c:	b538      	push	{r3, r4, r5, lr}
 8002a2e:	4d06      	ldr	r5, [pc, #24]	; (8002a48 <_isatty_r+0x1c>)
 8002a30:	2300      	movs	r3, #0
 8002a32:	4604      	mov	r4, r0
 8002a34:	4608      	mov	r0, r1
 8002a36:	602b      	str	r3, [r5, #0]
 8002a38:	f7ff faba 	bl	8001fb0 <_isatty>
 8002a3c:	1c43      	adds	r3, r0, #1
 8002a3e:	d102      	bne.n	8002a46 <_isatty_r+0x1a>
 8002a40:	682b      	ldr	r3, [r5, #0]
 8002a42:	b103      	cbz	r3, 8002a46 <_isatty_r+0x1a>
 8002a44:	6023      	str	r3, [r4, #0]
 8002a46:	bd38      	pop	{r3, r4, r5, pc}
 8002a48:	20000154 	.word	0x20000154

08002a4c <_init>:
 8002a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a4e:	bf00      	nop
 8002a50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a52:	bc08      	pop	{r3}
 8002a54:	469e      	mov	lr, r3
 8002a56:	4770      	bx	lr

08002a58 <_fini>:
 8002a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a5a:	bf00      	nop
 8002a5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a5e:	bc08      	pop	{r3}
 8002a60:	469e      	mov	lr, r3
 8002a62:	4770      	bx	lr
